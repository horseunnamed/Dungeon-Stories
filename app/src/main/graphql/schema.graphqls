# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

type AbilityScore {
    _id: String!
    desc: [String]
    full_name: String
    index: String
    name: String
    skills(limit: Int = 100, skip: Int, sort: SortFindManySkillInput): [Skill!]!
    url: String
}

type AbilityScoreSkills {
    index: String
    name: String
    url: String
}

type Alignment {
    _id: String!
    abbreviation: String
    desc: String
    index: String
    name: String
    url: String
}

type Background {
    _id: String!
    bonds: BackgroundPersonality_traits
    feature: BackgroundFeature
    flaws: BackgroundPersonality_traits
    ideals: BackgroundIdeals
    index: String
    language_options: BackgroundLanguage_options
    name: String
    personality_traits: BackgroundPersonality_traits
    starting_equipment: [BackgroundStarting_equipment]
    starting_equipment_options: [BackgroundStarting_equipment_options]
    starting_proficiencies(limit: Int = 100, skip: Int, sort: SortFindManyProficiencyInput): [Proficiency!]!
    url: String
}

type BackgroundFeature {
    desc: [String]
    name: String
}

type BackgroundIdeals {
    choose: Float
    from: [BackgroundIdealsFrom]
    type: String
}

type BackgroundIdealsFrom {
    alignments: [AbilityScoreSkills]
    desc: String
}

type BackgroundLanguage_options {
    choose: Float
    from: [AbilityScoreSkills]
    type: String
}

type BackgroundPersonality_traits {
    choose: Float
    from: [String]
    type: String
}

type BackgroundStarting_equipment {
    equipment: AbilityScoreSkills
    quantity: Float
}

type BackgroundStarting_equipment_options {
    choose: Float
    from: [BackgroundStarting_equipment_optionsFrom]
    type: String
}

type BackgroundStarting_equipment_optionsFrom {
    equipment: AbilityScoreSkills
    quantity: Float
}

type Class {
    _id: String!
    class_levels(limit: Int = 100, skip: Int, sort: SortFindManyLevelInput): [Level!]!
    hit_die: Float
    index: String
    multi_classing: ClassMulti_classing
    name: String
    proficiencies(limit: Int = 100, skip: Int, sort: SortFindManyProficiencyInput): [Proficiency!]!
    proficiency_choices: [ClassMulti_classingProficiency_choices]
    saving_throws: [AbilityScoreSkills]
    spellcasting: ClassSpellcasting
    spells(limit: Int = 100, skip: Int, sort: SortFindManySpellInput): [Spell!]!
    starting_equipment: [ClassStarting_equipment]
    starting_equipment_options: [ClassStarting_equipment_options]
    subclasses: [AbilityScoreSkills]
    url: String
}

type ClassMulti_classing {
    prerequisite_options: ClassMulti_classingPrerequisite_options
    prerequisites: [ClassMulti_classingPrerequisites]
    proficiencies: [AbilityScoreSkills]
    proficiency_choices: [ClassMulti_classingProficiency_choices]
}

type ClassMulti_classingPrerequisite_options {
    choose: Float
    from: [ClassMulti_classingPrerequisites]
    type: String
}

type ClassMulti_classingPrerequisites {
    ability_score: AbilityScoreSkills
    minimum_score: Float
}

type ClassMulti_classingProficiency_choices {
    choose: Float
    from: [AbilityScoreSkills]
    type: String
}

type ClassSpellcasting {
    info: [ClassSpellcastingInfo]
    level: Float
    spellcasting_ability: AbilityScoreSkills
}

type ClassSpellcastingInfo {
    desc: [String]
    name: String
}

type ClassStarting_equipment {
    equipment: AbilityScoreSkills
    quantity: Float
}

type ClassStarting_equipment_options {
    choose: Float
    from: [ClassStarting_equipment_optionsFrom]
    type: String
}

type ClassStarting_equipment_optionsFrom {
    equipment: AbilityScoreSkills
    quantity: Float
}

type Condition {
    _id: String!
    desc: [String]
    index: String
    name: String
    url: String
}

type DamageType {
    _id: String!
    desc: [String]
    index: String
    name: String
    url: String
}

type Equipment {
    _id: String!
    armor_category: String
    armor_class: EquipmentArmor_class
    capacity: String
    category_range: String
    contents: [EquipmentContents]
    cost: EquipmentCost
    damage: EquipmentDamage
    desc: [String]
    equipment_category: AbilityScoreSkills
    gear_category: AbilityScoreSkills
    index: String
    name: String
    properties(limit: Int = 100, skip: Int, sort: SortFindManyWeaponPropertyInput): [WeaponProperty!]!
    quantity: Float
    range: EquipmentRange
    special: [String]
    speed: EquipmentSpeed
    stealth_disadvantage: Boolean
    str_minimum: Float
    throw_range: EquipmentThrow_range
    tool_category: String
    two_handed_damage: EquipmentTwo_handed_damage
    url: String
    vehicle_category: String
    weapon_category: String
    weapon_range: String
    weight: Float
}

type EquipmentArmor_class {
    base: Float
    dex_bonus: Boolean
    max_bonus: Float
}

type EquipmentCategory {
    _id: String!
    equipment(limit: Int = 100, skip: Int, sort: SortFindManyEquipmentInput): [Equipment!]!
    index: String
    name: String
    url: String
}

type EquipmentContents {
    item: AbilityScoreSkills
    quantity: Float
}

type EquipmentCost {
    quantity: Float
    unit: String
}

type EquipmentDamage {
    damage_dice: String
    damage_type: AbilityScoreSkills
}

type EquipmentRange {
    long: Float
    normal: Float
}

type EquipmentSpeed {
    quantity: Float
    unit: String
}

type EquipmentThrow_range {
    long: Float
    normal: Float
}

type EquipmentTwo_handed_damage {
    damage_dice: String
    damage_type: AbilityScoreSkills
}

type Feat {
    _id: String!
    desc: [String]
    index: String
    name: String
    prerequisites: [FeatPrerequisites]
    url: String
}

type FeatPrerequisites {
    ability_score: AbilityScoreSkills
    minimum_score: Float
}

type Feature {
    _id: String!
    choice: FeatureChoice
    class(skip: Int, sort: SortFindOneClassInput): Class
    desc: [String]
    feature_specific: FeatureFeature_specific
    index: String
    level: Float
    name: String
    parent: AbilityScoreSkills
    prerequisites: [FeaturePrerequisites]
    reference: String
    subclass(skip: Int, sort: SortFindOneSubclassInput): Subclass
    url: String
}

type FeatureChoice {
    choose: Float
    from: [AbilityScoreSkills]
    type: String
}

type FeatureFeature_specific {
    expertise_options: FeatureChoice
    subfeature_options: FeatureChoice
}

type FeaturePrerequisites {
    level: Float
    type: String
}

type Language {
    _id: String!
    desc: String
    index: String
    name: String
    script: String
    type: String
    typical_speakers: [String]
    url: String
}

type Level {
    _id: String!
    ability_score_bonuses: Float
    class: AbilityScoreSkills
    class_specific: LevelClass_specific
    features(limit: Int = 100, skip: Int, sort: SortFindManyFeatureInput): [Feature!]!
    index: String
    level: Float
    prof_bonus: Float
    spellcasting: LevelSpellcasting
    subclass: AbilityScoreSkills
    subclass_specific: LevelSubclass_specific
    url: String
}

type LevelClass_specific {
    action_surges: Float
    arcane_recovery_levels: Float
    aura_range: Float
    bardic_inspiration_die: Float
    brutal_critical_dice: Float
    channel_divinity_charges: Float
    creating_spell_slots: [LevelClass_specificCreating_spell_slots]
    destroy_undead_cr: Float
    extra_attacks: Float
    favored_enemies: Float
    favored_terrain: Float
    indomitable_uses: Float
    invocations_known: Float
    ki_points: Float
    magical_secrets_max_5: Float
    magical_secrets_max_7: Float
    magical_secrets_max_9: Float
    martial_arts: LevelClass_specificMartial_arts
    metamagic_known: Float
    mystic_arcanum_level_6: Float
    mystic_arcanum_level_7: Float
    mystic_arcanum_level_8: Float
    mystic_arcanum_level_9: Float
    rage_count: Float
    rage_damage_bonus: Float
    sneak_attack: LevelClass_specificSneak_attack
    song_of_rest_die: Float
    sorcery_points: Float
    unarmored_movement: Float
    wild_shape_fly: Boolean
    wild_shape_max_cr: Float
    wild_shape_swim: Boolean
}

type LevelClass_specificCreating_spell_slots {
    sorcery_point_cost: Float
    spell_slot_level: Float
}

type LevelClass_specificMartial_arts {
    dice_count: Float
    dice_value: Float
}

type LevelClass_specificSneak_attack {
    dice_count: Float
    dice_value: Float
}

type LevelSpellcasting {
    cantrips_known: Float
    spell_slots_level_1: Float
    spell_slots_level_2: Float
    spell_slots_level_3: Float
    spell_slots_level_4: Float
    spell_slots_level_5: Float
    spell_slots_level_6: Float
    spell_slots_level_7: Float
    spell_slots_level_8: Float
    spell_slots_level_9: Float
    spells_known: Float
}

type LevelSubclass_specific {
    additional_magical_secrets_max_lvl: Float
    aura_range: Float
}

type MagicItem {
    _id: String!
    desc: [String]
    equipment_category: AbilityScoreSkills
    index: String
    name: String
    rarity: MagicItemRarity
    url: String
    variant: Boolean
    variants: [AbilityScoreSkills]
}

type MagicItemRarity {
    name: String
}

type MagicSchool {
    _id: String!
    desc: String
    index: String
    name: String
    url: String
}

type Monster {
    _id: String!
    actions: [MonsterActions]
    alignment: String
    armor_class: Float
    challenge_rating: Float
    charisma: Float
    condition_immunities: [AbilityScoreSkills]
    constitution: Float
    damage_immunities: [String]
    damage_resistances: [String]
    damage_vulnerabilities: [String]
    dexterity: Float
    forms: [AbilityScoreSkills]
    hit_dice: String
    hit_points: Float
    index: String
    intelligence: Float
    languages: String
    legendary_actions: [MonsterLegendary_actions]
    name: String
    proficiencies: [MonsterProficiencies]
    reactions: [MonsterReactions]
    senses: MonsterSenses
    size: String
    special_abilities: [MonsterSpecial_abilities]
    speed: MonsterSpeed
    strength: Float
    subtype: String
    type: String
    url: String
    wisdom: Float
    xp: Float
}

type MonsterActions {
    attack_bonus: Float
    attack_options: MonsterActionsAttack_options
    attacks: [MonsterActionsAttack_optionsFrom]
    damage: [MonsterActionsDamage]
    dc: MonsterActionsDc
    desc: String
    name: String
    options: MonsterActionsOptions
    usage: MonsterActionsUsage
}

type MonsterActionsAttack_options {
    choose: Float!
    from: [MonsterActionsAttack_optionsFrom]
    type: String!
}

type MonsterActionsAttack_optionsFrom {
    damage: [MonsterActionsDamage]
    dc: MonsterActionsDc
    name: String
}

type MonsterActionsDamage {
    damage_dice: String
    damage_type: AbilityScoreSkills
}

type MonsterActionsDc {
    dc_type: AbilityScoreSkills
    dc_value: Float
    success_type: String
}

type MonsterActionsOptions {
    choose: Float
    from: [MonsterActionsOptionsFrom]
}

type MonsterActionsOptionsFrom {
    count: Int
    name: String
    type: String
}

type MonsterActionsUsage {
    dice: String
    min_value: Float
    type: String
}

type MonsterLegendary_actions {
    attack_bonus: Float
    damage: [MonsterActionsDamage]
    dc: MonsterActionsDc
    desc: String
    name: String
}

type MonsterProficiencies {
    proficiency: AbilityScoreSkills
    value: Float
}

type MonsterReactions {
    dc: MonsterActionsDc
    desc: String
    name: String
}

type MonsterSenses {
    blindsight: String
    darkvision: String
    passive_perception: Float
    tremorsense: String
    truesight: String
}

type MonsterSpecial_abilities {
    attack_bonus: Float
    damage: [MonsterActionsDamage]
    dc: MonsterActionsDc
    desc: String
    name: String
    spellcasting: MonsterSpecial_abilitiesSpellcasting
    usage: MonsterSpecial_abilitiesSpellcastingSpellsUsage
}

type MonsterSpecial_abilitiesSpellcasting {
    ability: AbilityScoreSkills
    components_required: [String]
    dc: Float
    level: Float
    modifier: Float
    school: String
    slots: JSON
    spells: [MonsterSpecial_abilitiesSpellcastingSpells]
}

type MonsterSpecial_abilitiesSpellcastingSpells {
    level: Float
    name: String
    notes: String
    url: String
    usage: MonsterSpecial_abilitiesSpellcastingSpellsUsage
}

type MonsterSpecial_abilitiesSpellcastingSpellsUsage {
    rest_types: [String]
    times: Float
    type: String
}

type MonsterSpeed {
    burrow: String
    climb: String
    fly: String
    hover: Boolean
    swim: String
    walk: String
}

type Proficiency {
    _id: String!
    classes: [AbilityScoreSkills]
    index: String
    name: String
    races: [AbilityScoreSkills]
    reference: ProficiencyReference
    type: String
    url: String
}

type ProficiencyReference {
    index: String
    name: String
    type: String
    url: String
}

type Query {
    abilityScore(
        "Filter by fields"
        filter: FilterFindOneAbilityScoreInput, 
        skip: Int, 
        sort: SortFindOneAbilityScoreInput
    ): AbilityScore
    abilityScores(
        "Filter by fields"
        filter: FilterFindManyAbilityScoreInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyAbilityScoreInput
    ): [AbilityScore!]!
    alignment(
        "Filter by fields"
        filter: FilterFindOneAlignmentInput, 
        skip: Int, 
        sort: SortFindOneAlignmentInput
    ): Alignment
    alignments(
        "Filter by fields"
        filter: FilterFindManyAlignmentInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyAlignmentInput
    ): [Alignment!]!
    background(
        "Filter by fields"
        filter: FilterFindOneBackgroundInput, 
        skip: Int, 
        sort: SortFindOneBackgroundInput
    ): Background
    backgrounds(
        "Filter by fields"
        filter: FilterFindManyBackgroundInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyBackgroundInput
    ): [Background!]!
    class(
        "Filter by fields"
        filter: FilterFindOneClassInput, 
        skip: Int, 
        sort: SortFindOneClassInput
    ): Class
    classes(
        "Filter by fields"
        filter: FilterFindManyClassInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyClassInput
    ): [Class!]!
    condition(
        "Filter by fields"
        filter: FilterFindOneConditionInput, 
        skip: Int, 
        sort: SortFindOneConditionInput
    ): Condition
    conditions(
        "Filter by fields"
        filter: FilterFindManyConditionInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyConditionInput
    ): [Condition!]!
    damageType(
        "Filter by fields"
        filter: FilterFindOneDamageTypeInput, 
        skip: Int, 
        sort: SortFindOneDamageTypeInput
    ): DamageType
    damageTypes(
        "Filter by fields"
        filter: FilterFindManyDamageTypeInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyDamageTypeInput
    ): [DamageType!]!
    equipment(
        "Filter by fields"
        filter: FilterFindOneEquipmentInput, 
        skip: Int, 
        sort: SortFindOneEquipmentInput
    ): Equipment
    equipmentCategories(
        "Filter by fields"
        filter: FilterFindManyEquipmentCategoryInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyEquipmentCategoryInput
    ): [EquipmentCategory!]!
    equipmentCategory(
        "Filter by fields"
        filter: FilterFindOneEquipmentCategoryInput, 
        skip: Int, 
        sort: SortFindOneEquipmentCategoryInput
    ): EquipmentCategory
    equipments(
        "Filter by fields"
        filter: FilterFindManyEquipmentInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyEquipmentInput
    ): [Equipment!]!
    feat(
        "Filter by fields"
        filter: FilterFindOneFeatInput, 
        skip: Int, 
        sort: SortFindOneFeatInput
    ): Feat
    feats(
        "Filter by fields"
        filter: FilterFindManyFeatInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyFeatInput
    ): [Feat!]!
    feature(
        "Filter by fields"
        filter: FilterFindOneFeatureInput, 
        skip: Int, 
        sort: SortFindOneFeatureInput
    ): Feature
    features(
        "Filter by fields"
        filter: FilterFindManyFeatureInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyFeatureInput
    ): [Feature!]!
    language(
        "Filter by fields"
        filter: FilterFindOneLanguageInput, 
        skip: Int, 
        sort: SortFindOneLanguageInput
    ): Language
    languages(
        "Filter by fields"
        filter: FilterFindManyLanguageInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyLanguageInput
    ): [Language!]!
    level(
        "Filter by fields"
        filter: FilterFindOneLevelInput, 
        skip: Int, 
        sort: SortFindOneLevelInput
    ): Level
    levels(
        "Filter by fields"
        filter: FilterFindManyLevelInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyLevelInput
    ): [Level!]!
    magicItem(
        "Filter by fields"
        filter: FilterFindOneMagicItemInput, 
        skip: Int, 
        sort: SortFindOneMagicItemInput
    ): MagicItem
    magicItems(
        "Filter by fields"
        filter: FilterFindManyMagicItemInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyMagicItemInput
    ): [MagicItem!]!
    magicSchool(
        "Filter by fields"
        filter: FilterFindOneMagicSchoolInput, 
        skip: Int, 
        sort: SortFindOneMagicSchoolInput
    ): MagicSchool
    magicSchools(
        "Filter by fields"
        filter: FilterFindManyMagicSchoolInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyMagicSchoolInput
    ): [MagicSchool!]!
    monster(
        "Filter by fields"
        filter: FilterFindOneMonsterInput, 
        skip: Int, 
        sort: SortFindOneMonsterInput
    ): Monster
    monsters(
        "Filter by fields"
        filter: FilterFindManyMonsterInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyMonsterInput
    ): [Monster!]!
    proficiencies(
        "Filter by fields"
        filter: FilterFindManyProficiencyInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyProficiencyInput
    ): [Proficiency!]!
    proficiency(
        "Filter by fields"
        filter: FilterFindOneProficiencyInput, 
        skip: Int, 
        sort: SortFindOneProficiencyInput
    ): Proficiency
    race(
        "Filter by fields"
        filter: FilterFindOneRaceInput, 
        skip: Int, 
        sort: SortFindOneRaceInput
    ): Race
    races(
        "Filter by fields"
        filter: FilterFindManyRaceInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyRaceInput
    ): [Race!]!
    rule(
        "Filter by fields"
        filter: FilterFindOneRuleInput, 
        skip: Int, 
        sort: SortFindOneRuleInput
    ): Rule
    ruleSection(
        "Filter by fields"
        filter: FilterFindOneRuleSectionInput, 
        skip: Int, 
        sort: SortFindOneRuleSectionInput
    ): RuleSection
    ruleSections(
        "Filter by fields"
        filter: FilterFindManyRuleSectionInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyRuleSectionInput
    ): [RuleSection!]!
    rules(
        "Filter by fields"
        filter: FilterFindManyRuleInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyRuleInput
    ): [Rule!]!
    skill(
        "Filter by fields"
        filter: FilterFindOneSkillInput, 
        skip: Int, 
        sort: SortFindOneSkillInput
    ): Skill
    skills(
        "Filter by fields"
        filter: FilterFindManySkillInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManySkillInput
    ): [Skill!]!
    spell(
        "Filter by fields"
        filter: FilterFindOneSpellInput, 
        skip: Int, 
        sort: SortFindOneSpellInput
    ): Spell
    spells(
        "Filter by fields"
        filter: FilterFindManySpellInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManySpellInput
    ): [Spell!]!
    subclass(
        "Filter by fields"
        filter: FilterFindOneSubclassInput, 
        skip: Int, 
        sort: SortFindOneSubclassInput
    ): Subclass
    subclasses(
        "Filter by fields"
        filter: FilterFindManySubclassInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManySubclassInput
    ): [Subclass!]!
    subrace(
        "Filter by fields"
        filter: FilterFindOneSubraceInput, 
        skip: Int, 
        sort: SortFindOneSubraceInput
    ): Subrace
    subraces(
        "Filter by fields"
        filter: FilterFindManySubraceInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManySubraceInput
    ): [Subrace!]!
    trait(
        "Filter by fields"
        filter: FilterFindOneTraitInput, 
        skip: Int, 
        sort: SortFindOneTraitInput
    ): Trait
    traits(
        "Filter by fields"
        filter: FilterFindManyTraitInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyTraitInput
    ): [Trait!]!
    weaponProperties(
        "Filter by fields"
        filter: FilterFindManyWeaponPropertyInput, 
        limit: Int = 100, 
        skip: Int, 
        sort: SortFindManyWeaponPropertyInput
    ): [WeaponProperty!]!
    weaponProperty(
        "Filter by fields"
        filter: FilterFindOneWeaponPropertyInput, 
        skip: Int, 
        sort: SortFindOneWeaponPropertyInput
    ): WeaponProperty
}

type Race {
    _id: String!
    ability_bonus_options: RaceAbility_bonus_options
    ability_bonuses: [RaceAbility_bonuses]
    age: String
    alignment: String
    index: String
    language_desc: String
    language_options: RaceLanguage_options
    languages: [AbilityScoreSkills]
    name: String
    size: String
    size_description: String
    speed: Float
    starting_proficiencies: [AbilityScoreSkills]
    starting_proficiency_options: RaceStarting_proficiency_options
    subraces: [AbilityScoreSkills]
    traits(limit: Int = 100, skip: Int, sort: SortFindManyTraitInput): [Trait!]!
    url: String
}

type RaceAbility_bonus_options {
    choose: Float
    from: [RaceAbility_bonus_optionsFrom]
    type: String
}

type RaceAbility_bonus_optionsFrom {
    ability_score: AbilityScoreSkills
    bonus: Float
}

type RaceAbility_bonuses {
    ability_score: AbilityScoreSkills
    bonus: Float
}

type RaceLanguage_options {
    choose: Float
    from: [AbilityScoreSkills]
    type: String
}

type RaceStarting_proficiency_options {
    choose: Float
    from: [AbilityScoreSkills]
    type: String
}

type Rule {
    _id: String!
    desc: String
    index: String
    name: String
    subsections(limit: Int = 100, skip: Int, sort: SortFindManyRuleSectionInput): [RuleSection!]!
    url: String
}

type RuleSection {
    _id: String!
    desc: String
    index: String
    name: String
    url: String
}

type Skill {
    _id: String!
    ability_score: AbilityScoreSkills
    desc: [String]
    index: String
    name: String
    url: String
}

type Spell {
    _id: Spell_id!
    area_of_effect: SpellArea_of_effect
    attack_type: String
    casting_time: String
    classes: [AbilityScoreSkills]
    components: [String]
    concentration: Boolean
    damage: SpellDamage
    dc: SpellDc
    desc: [String]
    duration: String
    heal_at_slot_level: JSON
    higher_level: [String]
    index: String
    level: Float!
    material: String
    name: String
    range: String
    ritual: Boolean
    school(skip: Int, sort: SortFindOneMagicSchoolInput): MagicSchool
    subclasses: [AbilityScoreSkills]
    url: String
}

type SpellArea_of_effect {
    size: Float!
    type: String
}

type SpellDamage {
    damage_at_character_level: JSON
    damage_at_slot_level: JSON
    damage_type: AbilityScoreSkills
}

type SpellDc {
    dc_success: String
    dc_type: AbilityScoreSkills
    desc: String
}

type Spell_id {
    select: JSON
    type: String
}

type Subclass {
    _id: String!
    class: AbilityScoreSkills
    desc: [String]
    index: String
    name: String
    spells: [SubclassSpells]
    subclass_flavor: String
    subclass_levels(limit: Int = 100, skip: Int, sort: SortFindManyLevelInput): [Level!]!
    url: String
}

type SubclassSpells {
    prerequisites: [SubclassSpellsPrerequisites]
    spell: AbilityScoreSkills
}

type SubclassSpellsPrerequisites {
    index: String
    name: String
    type: String
    url: String
}

type Subrace {
    _id: String!
    ability_bonuses: [SubraceAbility_bonuses]
    desc: String
    index: String
    language_options: SubraceLanguage_options
    name: String
    race: AbilityScoreSkills
    racial_traits(limit: Int = 100, skip: Int, sort: SortFindManyTraitInput): [Trait!]!
    starting_proficiencies: [AbilityScoreSkills]
    url: String
}

type SubraceAbility_bonuses {
    ability_score: AbilityScoreSkills
    bonus: Float
}

type SubraceLanguage_options {
    choose: Float
    from: [AbilityScoreSkills]
    type: String
}

type Trait {
    _id: String!
    desc: [String]
    index: String
    name: String
    parent: AbilityScoreSkills
    proficiencies(limit: Int = 100, skip: Int, sort: SortFindManyProficiencyInput): [Proficiency!]!
    proficiency_choices: TraitProficiency_choices
    races: [AbilityScoreSkills]
    subraces: [AbilityScoreSkills]
    trait_specific: TraitTrait_specific
    url: String
}

type TraitProficiency_choices {
    choose: Float
    from: [AbilityScoreSkills]
    type: String
}

type TraitTrait_specific {
    breath_weapon: TraitTrait_specificBreath_weapon
    damage_type: AbilityScoreSkills
    spell_options: TraitTrait_specificSubtrait_options
    subtrait_options: TraitTrait_specificSubtrait_options
}

type TraitTrait_specificBreath_weapon {
    damage: [TraitTrait_specificBreath_weaponDamage]
    dc: TraitTrait_specificBreath_weaponDc
    desc: String
    name: String
    usage: TraitTrait_specificBreath_weaponUsage
}

type TraitTrait_specificBreath_weaponDamage {
    damage_at_character_level: JSON
    damage_type: AbilityScoreSkills
}

type TraitTrait_specificBreath_weaponDc {
    dc_type: AbilityScoreSkills
    success_type: String
}

type TraitTrait_specificBreath_weaponUsage {
    times: Float
    type: String
}

type TraitTrait_specificSubtrait_options {
    choose: Float
    from: [AbilityScoreSkills]
    type: String
}

type WeaponProperty {
    _id: String!
    desc: [String]
    index: String
    name: String
    url: String
}

enum SortFindManyAbilityScoreInput {
    DESC_ASC
    DESC_DESC
    FULL_NAME_ASC
    FULL_NAME_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyAlignmentInput {
    ABBREVIATION_ASC
    ABBREVIATION_DESC
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyBackgroundInput {
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyClassInput {
    CLASS_LEVELS_ASC
    CLASS_LEVELS_DESC
    HIT_DIE_ASC
    HIT_DIE_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    SPELLS_ASC
    SPELLS_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyConditionInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyDamageTypeInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyEquipmentCategoryInput {
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyEquipmentInput {
    ARMOR_CATEGORY_ASC
    ARMOR_CATEGORY_DESC
    CAPACITY_ASC
    CAPACITY_DESC
    CATEGORY_RANGE_ASC
    CATEGORY_RANGE_DESC
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    QUANTITY_ASC
    QUANTITY_DESC
    SPECIAL_ASC
    SPECIAL_DESC
    STEALTH_DISADVANTAGE_ASC
    STEALTH_DISADVANTAGE_DESC
    STR_MINIMUM_ASC
    STR_MINIMUM_DESC
    TOOL_CATEGORY_ASC
    TOOL_CATEGORY_DESC
    URL_ASC
    URL_DESC
    VEHICLE_CATEGORY_ASC
    VEHICLE_CATEGORY_DESC
    WEAPON_CATEGORY_ASC
    WEAPON_CATEGORY_DESC
    WEAPON_RANGE_ASC
    WEAPON_RANGE_DESC
    WEIGHT_ASC
    WEIGHT_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyFeatInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyFeatureInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    LEVEL_ASC
    LEVEL_DESC
    NAME_ASC
    NAME_DESC
    REFERENCE_ASC
    REFERENCE_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyLanguageInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    SCRIPT_ASC
    SCRIPT_DESC
    TYPE_ASC
    TYPE_DESC
    TYPICAL_SPEAKERS_ASC
    TYPICAL_SPEAKERS_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyLevelInput {
    ABILITY_SCORE_BONUSES_ASC
    ABILITY_SCORE_BONUSES_DESC
    INDEX_ASC
    INDEX_DESC
    LEVEL_ASC
    LEVEL_DESC
    PROF_BONUS_ASC
    PROF_BONUS_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyMagicItemInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyMagicSchoolInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyMonsterInput {
    ALIGNMENT_ASC
    ALIGNMENT_DESC
    ARMOR_CLASS_ASC
    ARMOR_CLASS_DESC
    CHALLENGE_RATING_ASC
    CHALLENGE_RATING_DESC
    CHARISMA_ASC
    CHARISMA_DESC
    CONSTITUTION_ASC
    CONSTITUTION_DESC
    DAMAGE_IMMUNITIES_ASC
    DAMAGE_IMMUNITIES_DESC
    DAMAGE_RESISTANCES_ASC
    DAMAGE_RESISTANCES_DESC
    DAMAGE_VULNERABILITIES_ASC
    DAMAGE_VULNERABILITIES_DESC
    DEXTERITY_ASC
    DEXTERITY_DESC
    HIT_DICE_ASC
    HIT_DICE_DESC
    HIT_POINTS_ASC
    HIT_POINTS_DESC
    INDEX_ASC
    INDEX_DESC
    INTELLIGENCE_ASC
    INTELLIGENCE_DESC
    LANGUAGES_ASC
    LANGUAGES_DESC
    NAME_ASC
    NAME_DESC
    SIZE_ASC
    SIZE_DESC
    STRENGTH_ASC
    STRENGTH_DESC
    SUBTYPE_ASC
    SUBTYPE_DESC
    TYPE_ASC
    TYPE_DESC
    URL_ASC
    URL_DESC
    WISDOM_ASC
    WISDOM_DESC
    XP_ASC
    XP_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyProficiencyInput {
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    TYPE_ASC
    TYPE_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyRaceInput {
    AGE_ASC
    AGE_DESC
    ALIGNMENT_ASC
    ALIGNMENT_DESC
    INDEX_ASC
    INDEX_DESC
    LANGUAGE_DESC_ASC
    LANGUAGE_DESC_DESC
    NAME_ASC
    NAME_DESC
    SIZE_ASC
    SIZE_DESC
    SIZE_DESCRIPTION_ASC
    SIZE_DESCRIPTION_DESC
    SPEED_ASC
    SPEED_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyRuleInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyRuleSectionInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManySkillInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManySpellInput {
    ATTACK_TYPE_ASC
    ATTACK_TYPE_DESC
    CASTING_TIME_ASC
    CASTING_TIME_DESC
    COMPONENTS_ASC
    COMPONENTS_DESC
    CONCENTRATION_ASC
    CONCENTRATION_DESC
    DESC_ASC
    DESC_DESC
    DURATION_ASC
    DURATION_DESC
    HIGHER_LEVEL_ASC
    HIGHER_LEVEL_DESC
    INDEX_ASC
    INDEX_DESC
    MATERIAL_ASC
    MATERIAL_DESC
    NAME_ASC
    NAME_DESC
    RANGE_ASC
    RANGE_DESC
    RITUAL_ASC
    RITUAL_DESC
    URL_ASC
    URL_DESC
    _ID__TYPE_ASC
    _ID__TYPE_DESC
}

enum SortFindManySubclassInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    SUBCLASS_FLAVOR_ASC
    SUBCLASS_FLAVOR_DESC
    SUBCLASS_LEVELS_ASC
    SUBCLASS_LEVELS_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManySubraceInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyTraitInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyWeaponPropertyInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneAbilityScoreInput {
    DESC_ASC
    DESC_DESC
    FULL_NAME_ASC
    FULL_NAME_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneAlignmentInput {
    ABBREVIATION_ASC
    ABBREVIATION_DESC
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneBackgroundInput {
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneClassInput {
    CLASS_LEVELS_ASC
    CLASS_LEVELS_DESC
    HIT_DIE_ASC
    HIT_DIE_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    SPELLS_ASC
    SPELLS_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneConditionInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneDamageTypeInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneEquipmentCategoryInput {
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneEquipmentInput {
    ARMOR_CATEGORY_ASC
    ARMOR_CATEGORY_DESC
    CAPACITY_ASC
    CAPACITY_DESC
    CATEGORY_RANGE_ASC
    CATEGORY_RANGE_DESC
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    QUANTITY_ASC
    QUANTITY_DESC
    SPECIAL_ASC
    SPECIAL_DESC
    STEALTH_DISADVANTAGE_ASC
    STEALTH_DISADVANTAGE_DESC
    STR_MINIMUM_ASC
    STR_MINIMUM_DESC
    TOOL_CATEGORY_ASC
    TOOL_CATEGORY_DESC
    URL_ASC
    URL_DESC
    VEHICLE_CATEGORY_ASC
    VEHICLE_CATEGORY_DESC
    WEAPON_CATEGORY_ASC
    WEAPON_CATEGORY_DESC
    WEAPON_RANGE_ASC
    WEAPON_RANGE_DESC
    WEIGHT_ASC
    WEIGHT_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneFeatInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneFeatureInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    LEVEL_ASC
    LEVEL_DESC
    NAME_ASC
    NAME_DESC
    REFERENCE_ASC
    REFERENCE_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneLanguageInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    SCRIPT_ASC
    SCRIPT_DESC
    TYPE_ASC
    TYPE_DESC
    TYPICAL_SPEAKERS_ASC
    TYPICAL_SPEAKERS_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneLevelInput {
    ABILITY_SCORE_BONUSES_ASC
    ABILITY_SCORE_BONUSES_DESC
    INDEX_ASC
    INDEX_DESC
    LEVEL_ASC
    LEVEL_DESC
    PROF_BONUS_ASC
    PROF_BONUS_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneMagicItemInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneMagicSchoolInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneMonsterInput {
    ALIGNMENT_ASC
    ALIGNMENT_DESC
    ARMOR_CLASS_ASC
    ARMOR_CLASS_DESC
    CHALLENGE_RATING_ASC
    CHALLENGE_RATING_DESC
    CHARISMA_ASC
    CHARISMA_DESC
    CONSTITUTION_ASC
    CONSTITUTION_DESC
    DAMAGE_IMMUNITIES_ASC
    DAMAGE_IMMUNITIES_DESC
    DAMAGE_RESISTANCES_ASC
    DAMAGE_RESISTANCES_DESC
    DAMAGE_VULNERABILITIES_ASC
    DAMAGE_VULNERABILITIES_DESC
    DEXTERITY_ASC
    DEXTERITY_DESC
    HIT_DICE_ASC
    HIT_DICE_DESC
    HIT_POINTS_ASC
    HIT_POINTS_DESC
    INDEX_ASC
    INDEX_DESC
    INTELLIGENCE_ASC
    INTELLIGENCE_DESC
    LANGUAGES_ASC
    LANGUAGES_DESC
    NAME_ASC
    NAME_DESC
    SIZE_ASC
    SIZE_DESC
    STRENGTH_ASC
    STRENGTH_DESC
    SUBTYPE_ASC
    SUBTYPE_DESC
    TYPE_ASC
    TYPE_DESC
    URL_ASC
    URL_DESC
    WISDOM_ASC
    WISDOM_DESC
    XP_ASC
    XP_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneProficiencyInput {
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    TYPE_ASC
    TYPE_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneRaceInput {
    AGE_ASC
    AGE_DESC
    ALIGNMENT_ASC
    ALIGNMENT_DESC
    INDEX_ASC
    INDEX_DESC
    LANGUAGE_DESC_ASC
    LANGUAGE_DESC_DESC
    NAME_ASC
    NAME_DESC
    SIZE_ASC
    SIZE_DESC
    SIZE_DESCRIPTION_ASC
    SIZE_DESCRIPTION_DESC
    SPEED_ASC
    SPEED_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneRuleInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneRuleSectionInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneSkillInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneSpellInput {
    ATTACK_TYPE_ASC
    ATTACK_TYPE_DESC
    CASTING_TIME_ASC
    CASTING_TIME_DESC
    COMPONENTS_ASC
    COMPONENTS_DESC
    CONCENTRATION_ASC
    CONCENTRATION_DESC
    DESC_ASC
    DESC_DESC
    DURATION_ASC
    DURATION_DESC
    HIGHER_LEVEL_ASC
    HIGHER_LEVEL_DESC
    INDEX_ASC
    INDEX_DESC
    MATERIAL_ASC
    MATERIAL_DESC
    NAME_ASC
    NAME_DESC
    RANGE_ASC
    RANGE_DESC
    RITUAL_ASC
    RITUAL_DESC
    URL_ASC
    URL_DESC
    _ID__TYPE_ASC
    _ID__TYPE_DESC
}

enum SortFindOneSubclassInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    SUBCLASS_FLAVOR_ASC
    SUBCLASS_FLAVOR_DESC
    SUBCLASS_LEVELS_ASC
    SUBCLASS_LEVELS_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneSubraceInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneTraitInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneWeaponPropertyInput {
    DESC_ASC
    DESC_DESC
    INDEX_ASC
    INDEX_DESC
    NAME_ASC
    NAME_DESC
    URL_ASC
    URL_DESC
    _ID_ASC
    _ID_DESC
}

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar RegExpAsString

input AbilityScoreSkillsInput {
    index: String
    name: String
    url: String
}

input FilterFindManyAbilityScoreDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyAbilityScoreFull_nameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyAbilityScoreIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyAbilityScoreInput {
    AND: [FilterFindManyAbilityScoreInput!]
    OR: [FilterFindManyAbilityScoreInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyAbilityScoreOperatorsInput
    desc: [String]
    full_name: String
    index: String
    name: String
    skills: [FilterFindManyAbilityScoreSkillsInput]
    url: String
}

input FilterFindManyAbilityScoreNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyAbilityScoreOperatorsInput {
    _id: FilterFindManyAbilityScore_idOperatorsInput
    desc: FilterFindManyAbilityScoreDescOperatorsInput
    full_name: FilterFindManyAbilityScoreFull_nameOperatorsInput
    index: FilterFindManyAbilityScoreIndexOperatorsInput
    name: FilterFindManyAbilityScoreNameOperatorsInput
    url: FilterFindManyAbilityScoreUrlOperatorsInput
}

input FilterFindManyAbilityScoreSkillsInput {
    index: String
    name: String
    url: String
}

input FilterFindManyAbilityScoreUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyAbilityScore_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyAlignmentAbbreviationOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyAlignmentDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyAlignmentIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyAlignmentInput {
    AND: [FilterFindManyAlignmentInput!]
    OR: [FilterFindManyAlignmentInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyAlignmentOperatorsInput
    abbreviation: String
    desc: String
    index: String
    name: String
    url: String
}

input FilterFindManyAlignmentNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyAlignmentOperatorsInput {
    _id: FilterFindManyAlignment_idOperatorsInput
    abbreviation: FilterFindManyAlignmentAbbreviationOperatorsInput
    desc: FilterFindManyAlignmentDescOperatorsInput
    index: FilterFindManyAlignmentIndexOperatorsInput
    name: FilterFindManyAlignmentNameOperatorsInput
    url: FilterFindManyAlignmentUrlOperatorsInput
}

input FilterFindManyAlignmentUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyAlignment_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyBackgroundFeatureInput {
    desc: [String]
    name: String
}

input FilterFindManyBackgroundIdealsFromInput {
    alignments: [FilterFindManyAbilityScoreSkillsInput]
    desc: String
}

input FilterFindManyBackgroundIdealsInput {
    choose: Float
    from: [FilterFindManyBackgroundIdealsFromInput]
    type: String
}

input FilterFindManyBackgroundIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyBackgroundInput {
    AND: [FilterFindManyBackgroundInput!]
    OR: [FilterFindManyBackgroundInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyBackgroundOperatorsInput
    bonds: FilterFindManyBackgroundPersonality_traitsInput
    feature: FilterFindManyBackgroundFeatureInput
    flaws: FilterFindManyBackgroundPersonality_traitsInput
    ideals: FilterFindManyBackgroundIdealsInput
    index: String
    language_options: FilterFindManyBackgroundLanguage_optionsInput
    name: String
    personality_traits: FilterFindManyBackgroundPersonality_traitsInput
    starting_equipment: [FilterFindManyBackgroundStarting_equipmentInput]
    starting_equipment_options: [FilterFindManyBackgroundStarting_equipment_optionsInput]
    starting_proficiencies: [FilterFindManyAbilityScoreSkillsInput]
    url: String
}

input FilterFindManyBackgroundLanguage_optionsInput {
    choose: Float
    from: [FilterFindManyAbilityScoreSkillsInput]
    type: String
}

input FilterFindManyBackgroundNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyBackgroundOperatorsInput {
    _id: FilterFindManyBackground_idOperatorsInput
    index: FilterFindManyBackgroundIndexOperatorsInput
    name: FilterFindManyBackgroundNameOperatorsInput
    url: FilterFindManyBackgroundUrlOperatorsInput
}

input FilterFindManyBackgroundPersonality_traitsInput {
    choose: Float
    from: [String]
    type: String
}

input FilterFindManyBackgroundStarting_equipmentInput {
    equipment: FilterFindManyAbilityScoreSkillsInput
    quantity: Float
}

input FilterFindManyBackgroundStarting_equipment_optionsFromInput {
    equipment: FilterFindManyAbilityScoreSkillsInput
    quantity: Float
}

input FilterFindManyBackgroundStarting_equipment_optionsInput {
    choose: Float
    from: [FilterFindManyBackgroundStarting_equipment_optionsFromInput]
    type: String
}

input FilterFindManyBackgroundUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyBackground_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyClassClass_levelsOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyClassHit_dieOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyClassIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyClassInput {
    AND: [FilterFindManyClassInput!]
    OR: [FilterFindManyClassInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyClassOperatorsInput
    class_levels: String
    hit_die: Float
    index: String
    multi_classing: FilterFindManyClassMulti_classingInput
    name: String
    proficiencies: [FilterFindManyAbilityScoreSkillsInput]
    proficiency_choices: [FilterFindManyClassMulti_classingProficiency_choicesInput]
    saving_throws: [FilterFindManyAbilityScoreSkillsInput]
    spellcasting: FilterFindManyClassSpellcastingInput
    spells: String
    starting_equipment: [FilterFindManyClassStarting_equipmentInput]
    starting_equipment_options: [FilterFindManyClassStarting_equipment_optionsInput]
    subclasses: [FilterFindManyAbilityScoreSkillsInput]
    url: String
}

input FilterFindManyClassMulti_classingInput {
    prerequisite_options: FilterFindManyClassMulti_classingPrerequisite_optionsInput
    prerequisites: [FilterFindManyClassMulti_classingPrerequisitesInput]
    proficiencies: [FilterFindManyAbilityScoreSkillsInput]
    proficiency_choices: [FilterFindManyClassMulti_classingProficiency_choicesInput]
}

input FilterFindManyClassMulti_classingPrerequisite_optionsInput {
    choose: Float
    from: [FilterFindManyClassMulti_classingPrerequisitesInput]
    type: String
}

input FilterFindManyClassMulti_classingPrerequisitesInput {
    ability_score: AbilityScoreSkillsInput
    minimum_score: Float
}

input FilterFindManyClassMulti_classingProficiency_choicesInput {
    choose: Float
    from: [AbilityScoreSkillsInput]
    type: String
}

input FilterFindManyClassNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyClassOperatorsInput {
    _id: FilterFindManyClass_idOperatorsInput
    class_levels: FilterFindManyClassClass_levelsOperatorsInput
    hit_die: FilterFindManyClassHit_dieOperatorsInput
    index: FilterFindManyClassIndexOperatorsInput
    name: FilterFindManyClassNameOperatorsInput
    spells: FilterFindManyClassSpellsOperatorsInput
    url: FilterFindManyClassUrlOperatorsInput
}

input FilterFindManyClassSpellcastingInfoInput {
    desc: [String]
    name: String
}

input FilterFindManyClassSpellcastingInput {
    info: [FilterFindManyClassSpellcastingInfoInput]
    level: Float
    spellcasting_ability: FilterFindManyAbilityScoreSkillsInput
}

input FilterFindManyClassSpellsOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyClassStarting_equipmentInput {
    equipment: FilterFindManyAbilityScoreSkillsInput
    quantity: Float
}

input FilterFindManyClassStarting_equipment_optionsFromInput {
    equipment: FilterFindManyAbilityScoreSkillsInput
    quantity: Float
}

input FilterFindManyClassStarting_equipment_optionsInput {
    choose: Float
    from: [FilterFindManyClassStarting_equipment_optionsFromInput]
    type: String
}

input FilterFindManyClassUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyClass_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyConditionDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyConditionIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyConditionInput {
    AND: [FilterFindManyConditionInput!]
    OR: [FilterFindManyConditionInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyConditionOperatorsInput
    desc: [String]
    index: String
    name: String
    url: String
}

input FilterFindManyConditionNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyConditionOperatorsInput {
    _id: FilterFindManyCondition_idOperatorsInput
    desc: FilterFindManyConditionDescOperatorsInput
    index: FilterFindManyConditionIndexOperatorsInput
    name: FilterFindManyConditionNameOperatorsInput
    url: FilterFindManyConditionUrlOperatorsInput
}

input FilterFindManyConditionUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyCondition_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyDamageTypeDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyDamageTypeIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyDamageTypeInput {
    AND: [FilterFindManyDamageTypeInput!]
    OR: [FilterFindManyDamageTypeInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyDamageTypeOperatorsInput
    desc: [String]
    index: String
    name: String
    url: String
}

input FilterFindManyDamageTypeNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyDamageTypeOperatorsInput {
    _id: FilterFindManyDamageType_idOperatorsInput
    desc: FilterFindManyDamageTypeDescOperatorsInput
    index: FilterFindManyDamageTypeIndexOperatorsInput
    name: FilterFindManyDamageTypeNameOperatorsInput
    url: FilterFindManyDamageTypeUrlOperatorsInput
}

input FilterFindManyDamageTypeUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyDamageType_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentArmor_categoryOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentArmor_classInput {
    base: Float
    dex_bonus: Boolean
    max_bonus: Float
}

input FilterFindManyEquipmentCapacityOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentCategoryIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentCategoryInput {
    AND: [FilterFindManyEquipmentCategoryInput!]
    OR: [FilterFindManyEquipmentCategoryInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyEquipmentCategoryOperatorsInput
    equipment: [FilterFindManyAbilityScoreSkillsInput]
    index: String
    name: String
    url: String
}

input FilterFindManyEquipmentCategoryNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyEquipmentCategoryOperatorsInput {
    _id: FilterFindManyEquipmentCategory_idOperatorsInput
    index: FilterFindManyEquipmentCategoryIndexOperatorsInput
    name: FilterFindManyEquipmentCategoryNameOperatorsInput
    url: FilterFindManyEquipmentCategoryUrlOperatorsInput
}

input FilterFindManyEquipmentCategoryUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentCategory_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentCategory_rangeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentContentsInput {
    item: FilterFindManyAbilityScoreSkillsInput
    quantity: Float
}

input FilterFindManyEquipmentCostInput {
    quantity: Float
    unit: String
}

input FilterFindManyEquipmentDamageInput {
    damage_dice: String
    damage_type: FilterFindManyAbilityScoreSkillsInput
}

input FilterFindManyEquipmentDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentInput {
    AND: [FilterFindManyEquipmentInput!]
    OR: [FilterFindManyEquipmentInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyEquipmentOperatorsInput
    armor_category: String
    armor_class: FilterFindManyEquipmentArmor_classInput
    capacity: String
    category_range: String
    contents: [FilterFindManyEquipmentContentsInput]
    cost: FilterFindManyEquipmentCostInput
    damage: FilterFindManyEquipmentDamageInput
    desc: [String]
    equipment_category: FilterFindManyAbilityScoreSkillsInput
    gear_category: FilterFindManyAbilityScoreSkillsInput
    index: String
    name: String
    properties: [FilterFindManyAbilityScoreSkillsInput]
    quantity: Float
    range: FilterFindManyEquipmentRangeInput
    special: [String]
    speed: FilterFindManyEquipmentSpeedInput
    stealth_disadvantage: Boolean
    str_minimum: Float
    throw_range: FilterFindManyEquipmentThrow_rangeInput
    tool_category: String
    two_handed_damage: FilterFindManyEquipmentTwo_handed_damageInput
    url: String
    vehicle_category: String
    weapon_category: String
    weapon_range: String
    weight: Float
}

input FilterFindManyEquipmentNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyEquipmentOperatorsInput {
    _id: FilterFindManyEquipment_idOperatorsInput
    armor_category: FilterFindManyEquipmentArmor_categoryOperatorsInput
    capacity: FilterFindManyEquipmentCapacityOperatorsInput
    category_range: FilterFindManyEquipmentCategory_rangeOperatorsInput
    desc: FilterFindManyEquipmentDescOperatorsInput
    index: FilterFindManyEquipmentIndexOperatorsInput
    name: FilterFindManyEquipmentNameOperatorsInput
    quantity: FilterFindManyEquipmentQuantityOperatorsInput
    special: FilterFindManyEquipmentSpecialOperatorsInput
    stealth_disadvantage: FilterFindManyEquipmentStealth_disadvantageOperatorsInput
    str_minimum: FilterFindManyEquipmentStr_minimumOperatorsInput
    tool_category: FilterFindManyEquipmentTool_categoryOperatorsInput
    url: FilterFindManyEquipmentUrlOperatorsInput
    vehicle_category: FilterFindManyEquipmentVehicle_categoryOperatorsInput
    weapon_category: FilterFindManyEquipmentWeapon_categoryOperatorsInput
    weapon_range: FilterFindManyEquipmentWeapon_rangeOperatorsInput
    weight: FilterFindManyEquipmentWeightOperatorsInput
}

input FilterFindManyEquipmentQuantityOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyEquipmentRangeInput {
    long: Float
    normal: Float
}

input FilterFindManyEquipmentSpecialOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentSpeedInput {
    quantity: Float
    unit: String
}

input FilterFindManyEquipmentStealth_disadvantageOperatorsInput {
    exists: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    nin: [Boolean]
}

input FilterFindManyEquipmentStr_minimumOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyEquipmentThrow_rangeInput {
    long: Float
    normal: Float
}

input FilterFindManyEquipmentTool_categoryOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentTwo_handed_damageInput {
    damage_dice: String
    damage_type: FilterFindManyAbilityScoreSkillsInput
}

input FilterFindManyEquipmentUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentVehicle_categoryOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentWeapon_categoryOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentWeapon_rangeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyEquipmentWeightOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyEquipment_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyFeatDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyFeatIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyFeatInput {
    AND: [FilterFindManyFeatInput!]
    OR: [FilterFindManyFeatInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyFeatOperatorsInput
    desc: [String]
    index: String
    name: String
    prerequisites: [FilterFindManyFeatPrerequisitesInput]
    url: String
}

input FilterFindManyFeatNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyFeatOperatorsInput {
    _id: FilterFindManyFeat_idOperatorsInput
    desc: FilterFindManyFeatDescOperatorsInput
    index: FilterFindManyFeatIndexOperatorsInput
    name: FilterFindManyFeatNameOperatorsInput
    url: FilterFindManyFeatUrlOperatorsInput
}

input FilterFindManyFeatPrerequisitesInput {
    ability_score: FilterFindManyAbilityScoreSkillsInput
    minimum_score: Float
}

input FilterFindManyFeatUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyFeat_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyFeatureChoiceInput {
    choose: Float
    from: [AbilityScoreSkillsInput]
    type: String
}

input FilterFindManyFeatureDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyFeatureFeature_specificInput {
    expertise_options: FilterFindManyFeatureChoiceInput
    subfeature_options: FilterFindManyFeatureChoiceInput
}

input FilterFindManyFeatureIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyFeatureInput {
    AND: [FilterFindManyFeatureInput!]
    OR: [FilterFindManyFeatureInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyFeatureOperatorsInput
    choice: FilterFindManyFeatureChoiceInput
    class: FilterFindManyAbilityScoreSkillsInput
    desc: [String]
    feature_specific: FilterFindManyFeatureFeature_specificInput
    index: String
    level: Float
    name: String
    parent: FilterFindManyAbilityScoreSkillsInput
    prerequisites: [FilterFindManyFeaturePrerequisitesInput]
    reference: String
    subclass: FilterFindManyAbilityScoreSkillsInput
    url: String
}

input FilterFindManyFeatureLevelOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyFeatureNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyFeatureOperatorsInput {
    _id: FilterFindManyFeature_idOperatorsInput
    desc: FilterFindManyFeatureDescOperatorsInput
    index: FilterFindManyFeatureIndexOperatorsInput
    level: FilterFindManyFeatureLevelOperatorsInput
    name: FilterFindManyFeatureNameOperatorsInput
    reference: FilterFindManyFeatureReferenceOperatorsInput
    url: FilterFindManyFeatureUrlOperatorsInput
}

input FilterFindManyFeaturePrerequisitesInput {
    level: Float
    type: String
}

input FilterFindManyFeatureReferenceOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyFeatureUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyFeature_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyLanguageDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyLanguageIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyLanguageInput {
    AND: [FilterFindManyLanguageInput!]
    OR: [FilterFindManyLanguageInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyLanguageOperatorsInput
    desc: String
    index: String
    name: String
    script: String
    type: String
    typical_speakers: [String]
    url: String
}

input FilterFindManyLanguageNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyLanguageOperatorsInput {
    _id: FilterFindManyLanguage_idOperatorsInput
    desc: FilterFindManyLanguageDescOperatorsInput
    index: FilterFindManyLanguageIndexOperatorsInput
    name: FilterFindManyLanguageNameOperatorsInput
    script: FilterFindManyLanguageScriptOperatorsInput
    type: FilterFindManyLanguageTypeOperatorsInput
    typical_speakers: FilterFindManyLanguageTypical_speakersOperatorsInput
    url: FilterFindManyLanguageUrlOperatorsInput
}

input FilterFindManyLanguageScriptOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyLanguageTypeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyLanguageTypical_speakersOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyLanguageUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyLanguage_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyLevelAbility_score_bonusesOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyLevelClass_specificCreating_spell_slotsInput {
    sorcery_point_cost: Float
    spell_slot_level: Float
}

input FilterFindManyLevelClass_specificInput {
    action_surges: Float
    arcane_recovery_levels: Float
    aura_range: Float
    bardic_inspiration_die: Float
    brutal_critical_dice: Float
    channel_divinity_charges: Float
    creating_spell_slots: [FilterFindManyLevelClass_specificCreating_spell_slotsInput]
    destroy_undead_cr: Float
    extra_attacks: Float
    favored_enemies: Float
    favored_terrain: Float
    indomitable_uses: Float
    invocations_known: Float
    ki_points: Float
    magical_secrets_max_5: Float
    magical_secrets_max_7: Float
    magical_secrets_max_9: Float
    martial_arts: FilterFindManyLevelClass_specificMartial_artsInput
    metamagic_known: Float
    mystic_arcanum_level_6: Float
    mystic_arcanum_level_7: Float
    mystic_arcanum_level_8: Float
    mystic_arcanum_level_9: Float
    rage_count: Float
    rage_damage_bonus: Float
    sneak_attack: FilterFindManyLevelClass_specificSneak_attackInput
    song_of_rest_die: Float
    sorcery_points: Float
    unarmored_movement: Float
    wild_shape_fly: Boolean
    wild_shape_max_cr: Float
    wild_shape_swim: Boolean
}

input FilterFindManyLevelClass_specificMartial_artsInput {
    dice_count: Float
    dice_value: Float
}

input FilterFindManyLevelClass_specificSneak_attackInput {
    dice_count: Float
    dice_value: Float
}

input FilterFindManyLevelIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyLevelInput {
    AND: [FilterFindManyLevelInput!]
    OR: [FilterFindManyLevelInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyLevelOperatorsInput
    ability_score_bonuses: Float
    class: FilterFindManyAbilityScoreSkillsInput
    class_specific: FilterFindManyLevelClass_specificInput
    features: [FilterFindManyAbilityScoreSkillsInput]
    index: String
    level: Float
    prof_bonus: Float
    spellcasting: FilterFindManyLevelSpellcastingInput
    subclass: FilterFindManyAbilityScoreSkillsInput
    subclass_specific: FilterFindManyLevelSubclass_specificInput
    url: String
}

input FilterFindManyLevelLevelOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyLevelOperatorsInput {
    _id: FilterFindManyLevel_idOperatorsInput
    ability_score_bonuses: FilterFindManyLevelAbility_score_bonusesOperatorsInput
    index: FilterFindManyLevelIndexOperatorsInput
    level: FilterFindManyLevelLevelOperatorsInput
    prof_bonus: FilterFindManyLevelProf_bonusOperatorsInput
    url: FilterFindManyLevelUrlOperatorsInput
}

input FilterFindManyLevelProf_bonusOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyLevelSpellcastingInput {
    cantrips_known: Float
    spell_slots_level_1: Float
    spell_slots_level_2: Float
    spell_slots_level_3: Float
    spell_slots_level_4: Float
    spell_slots_level_5: Float
    spell_slots_level_6: Float
    spell_slots_level_7: Float
    spell_slots_level_8: Float
    spell_slots_level_9: Float
    spells_known: Float
}

input FilterFindManyLevelSubclass_specificInput {
    additional_magical_secrets_max_lvl: Float
    aura_range: Float
}

input FilterFindManyLevelUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyLevel_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMagicItemDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMagicItemIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMagicItemInput {
    AND: [FilterFindManyMagicItemInput!]
    OR: [FilterFindManyMagicItemInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyMagicItemOperatorsInput
    desc: [String]
    equipment_category: FilterFindManyAbilityScoreSkillsInput
    index: String
    name: String
    rarity: FilterFindManyMagicItemRarityInput
    url: String
    variant: Boolean
    variants: [FilterFindManyAbilityScoreSkillsInput]
}

input FilterFindManyMagicItemNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyMagicItemOperatorsInput {
    _id: FilterFindManyMagicItem_idOperatorsInput
    desc: FilterFindManyMagicItemDescOperatorsInput
    index: FilterFindManyMagicItemIndexOperatorsInput
    name: FilterFindManyMagicItemNameOperatorsInput
    url: FilterFindManyMagicItemUrlOperatorsInput
}

input FilterFindManyMagicItemRarityInput {
    name: String
}

input FilterFindManyMagicItemUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMagicItem_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMagicSchoolDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMagicSchoolIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMagicSchoolInput {
    AND: [FilterFindManyMagicSchoolInput!]
    OR: [FilterFindManyMagicSchoolInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyMagicSchoolOperatorsInput
    desc: String
    index: String
    name: String
    url: String
}

input FilterFindManyMagicSchoolNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyMagicSchoolOperatorsInput {
    _id: FilterFindManyMagicSchool_idOperatorsInput
    desc: FilterFindManyMagicSchoolDescOperatorsInput
    index: FilterFindManyMagicSchoolIndexOperatorsInput
    name: FilterFindManyMagicSchoolNameOperatorsInput
    url: FilterFindManyMagicSchoolUrlOperatorsInput
}

input FilterFindManyMagicSchoolUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMagicSchool_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterActionsAttack_optionsFromInput {
    damage: [MonsterActionsDamageInput]
    dc: MonsterActionsDcInput
    name: String
}

input FilterFindManyMonsterActionsAttack_optionsInput {
    choose: Float
    from: [FilterFindManyMonsterActionsAttack_optionsFromInput]
    type: String
}

input FilterFindManyMonsterActionsDamageInput {
    damage_dice: String
    damage_type: AbilityScoreSkillsInput
}

input FilterFindManyMonsterActionsDcInput {
    dc_type: AbilityScoreSkillsInput
    dc_value: Float
    success_type: String
}

input FilterFindManyMonsterActionsInput {
    attack_bonus: Float
    attack_options: FilterFindManyMonsterActionsAttack_optionsInput
    attacks: [FilterFindManyMonsterActionsAttack_optionsFromInput]
    damage: [FilterFindManyMonsterActionsDamageInput]
    dc: FilterFindManyMonsterActionsDcInput
    desc: String
    name: String
    options: FilterFindManyMonsterActionsOptionsInput
    usage: FilterFindManyMonsterActionsUsageInput
}

input FilterFindManyMonsterActionsOptionsFromInput {
    count: JSON
    name: String
    type: String
}

input FilterFindManyMonsterActionsOptionsInput {
    choose: Float
    from: [FilterFindManyMonsterActionsOptionsFromInput]
}

input FilterFindManyMonsterActionsUsageInput {
    dice: String
    min_value: Float
    type: String
}

input FilterFindManyMonsterAlignmentOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterArmor_classOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyMonsterChallenge_ratingOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyMonsterCharismaOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyMonsterConstitutionOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyMonsterDamage_immunitiesOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterDamage_resistancesOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterDamage_vulnerabilitiesOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterDexterityOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyMonsterHit_diceOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterHit_pointsOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyMonsterIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterInput {
    AND: [FilterFindManyMonsterInput!]
    OR: [FilterFindManyMonsterInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyMonsterOperatorsInput
    actions: [FilterFindManyMonsterActionsInput]
    alignment: String
    armor_class: Float
    challenge_rating: Float
    charisma: Float
    condition_immunities: [FilterFindManyAbilityScoreSkillsInput]
    constitution: Float
    damage_immunities: [String]
    damage_resistances: [String]
    damage_vulnerabilities: [String]
    dexterity: Float
    forms: [FilterFindManyAbilityScoreSkillsInput]
    hit_dice: String
    hit_points: Float
    index: String
    intelligence: Float
    languages: String
    legendary_actions: [FilterFindManyMonsterLegendary_actionsInput]
    name: String
    proficiencies: [FilterFindManyMonsterProficienciesInput]
    reactions: [FilterFindManyMonsterReactionsInput]
    senses: FilterFindManyMonsterSensesInput
    size: String
    special_abilities: [FilterFindManyMonsterSpecial_abilitiesInput]
    speed: FilterFindManyMonsterSpeedInput
    strength: Float
    subtype: String
    type: String
    url: String
    wisdom: Float
    xp: Float
}

input FilterFindManyMonsterIntelligenceOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyMonsterLanguagesOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterLegendary_actionsInput {
    attack_bonus: Float
    damage: [FilterFindManyMonsterActionsDamageInput]
    dc: FilterFindManyMonsterActionsDcInput
    desc: String
    name: String
}

input FilterFindManyMonsterNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyMonsterOperatorsInput {
    _id: FilterFindManyMonster_idOperatorsInput
    alignment: FilterFindManyMonsterAlignmentOperatorsInput
    armor_class: FilterFindManyMonsterArmor_classOperatorsInput
    challenge_rating: FilterFindManyMonsterChallenge_ratingOperatorsInput
    charisma: FilterFindManyMonsterCharismaOperatorsInput
    constitution: FilterFindManyMonsterConstitutionOperatorsInput
    damage_immunities: FilterFindManyMonsterDamage_immunitiesOperatorsInput
    damage_resistances: FilterFindManyMonsterDamage_resistancesOperatorsInput
    damage_vulnerabilities: FilterFindManyMonsterDamage_vulnerabilitiesOperatorsInput
    dexterity: FilterFindManyMonsterDexterityOperatorsInput
    hit_dice: FilterFindManyMonsterHit_diceOperatorsInput
    hit_points: FilterFindManyMonsterHit_pointsOperatorsInput
    index: FilterFindManyMonsterIndexOperatorsInput
    intelligence: FilterFindManyMonsterIntelligenceOperatorsInput
    languages: FilterFindManyMonsterLanguagesOperatorsInput
    name: FilterFindManyMonsterNameOperatorsInput
    size: FilterFindManyMonsterSizeOperatorsInput
    strength: FilterFindManyMonsterStrengthOperatorsInput
    subtype: FilterFindManyMonsterSubtypeOperatorsInput
    type: FilterFindManyMonsterTypeOperatorsInput
    url: FilterFindManyMonsterUrlOperatorsInput
    wisdom: FilterFindManyMonsterWisdomOperatorsInput
    xp: FilterFindManyMonsterXpOperatorsInput
}

input FilterFindManyMonsterProficienciesInput {
    proficiency: FilterFindManyAbilityScoreSkillsInput
    value: Float
}

input FilterFindManyMonsterReactionsInput {
    dc: FilterFindManyMonsterActionsDcInput
    desc: String
    name: String
}

input FilterFindManyMonsterSensesInput {
    blindsight: String
    darkvision: String
    passive_perception: Float
    tremorsense: String
    truesight: String
}

input FilterFindManyMonsterSizeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterSpecial_abilitiesInput {
    attack_bonus: Float
    damage: [FilterFindManyMonsterActionsDamageInput]
    dc: FilterFindManyMonsterActionsDcInput
    desc: String
    name: String
    spellcasting: FilterFindManyMonsterSpecial_abilitiesSpellcastingInput
    usage: FilterFindManyMonsterSpecial_abilitiesSpellcastingSpellsUsageInput
}

input FilterFindManyMonsterSpecial_abilitiesSpellcastingInput {
    ability: FilterFindManyAbilityScoreSkillsInput
    components_required: [String]
    dc: Float
    level: Float
    modifier: Float
    school: String
    slots: JSON
    spells: [FilterFindManyMonsterSpecial_abilitiesSpellcastingSpellsInput]
}

input FilterFindManyMonsterSpecial_abilitiesSpellcastingSpellsInput {
    level: Float
    name: String
    notes: String
    url: String
    usage: FilterFindManyMonsterSpecial_abilitiesSpellcastingSpellsUsageInput
}

input FilterFindManyMonsterSpecial_abilitiesSpellcastingSpellsUsageInput {
    rest_types: [String]
    times: Float
    type: String
}

input FilterFindManyMonsterSpeedInput {
    burrow: String
    climb: String
    fly: String
    hover: Boolean
    swim: String
    walk: String
}

input FilterFindManyMonsterStrengthOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyMonsterSubtypeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterTypeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyMonsterWisdomOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyMonsterXpOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyMonster_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyProficiencyIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyProficiencyInput {
    AND: [FilterFindManyProficiencyInput!]
    OR: [FilterFindManyProficiencyInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyProficiencyOperatorsInput
    classes: [FilterFindManyAbilityScoreSkillsInput]
    index: String
    name: String
    races: [FilterFindManyAbilityScoreSkillsInput]
    reference: FilterFindManyProficiencyReferenceInput
    type: String
    url: String
}

input FilterFindManyProficiencyNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyProficiencyOperatorsInput {
    _id: FilterFindManyProficiency_idOperatorsInput
    index: FilterFindManyProficiencyIndexOperatorsInput
    name: FilterFindManyProficiencyNameOperatorsInput
    type: FilterFindManyProficiencyTypeOperatorsInput
    url: FilterFindManyProficiencyUrlOperatorsInput
}

input FilterFindManyProficiencyReferenceInput {
    index: String
    name: String
    type: String
    url: String
}

input FilterFindManyProficiencyTypeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyProficiencyUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyProficiency_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRaceAbility_bonus_optionsFromInput {
    ability_score: FilterFindManyAbilityScoreSkillsInput
    bonus: Float
}

input FilterFindManyRaceAbility_bonus_optionsInput {
    choose: Float
    from: [FilterFindManyRaceAbility_bonus_optionsFromInput]
    type: String
}

input FilterFindManyRaceAbility_bonusesInput {
    ability_score: FilterFindManyAbilityScoreSkillsInput
    bonus: Float
}

input FilterFindManyRaceAgeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRaceAlignmentOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRaceIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRaceInput {
    AND: [FilterFindManyRaceInput!]
    OR: [FilterFindManyRaceInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyRaceOperatorsInput
    ability_bonus_options: FilterFindManyRaceAbility_bonus_optionsInput
    ability_bonuses: [FilterFindManyRaceAbility_bonusesInput]
    age: String
    alignment: String
    index: String
    language_desc: String
    language_options: FilterFindManyRaceLanguage_optionsInput
    languages: [FilterFindManyAbilityScoreSkillsInput]
    name: String
    size: String
    size_description: String
    speed: Float
    starting_proficiencies: [FilterFindManyAbilityScoreSkillsInput]
    starting_proficiency_options: FilterFindManyRaceStarting_proficiency_optionsInput
    subraces: [FilterFindManyAbilityScoreSkillsInput]
    traits: [FilterFindManyAbilityScoreSkillsInput]
    url: String
}

input FilterFindManyRaceLanguage_descOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRaceLanguage_optionsInput {
    choose: Float
    from: [FilterFindManyAbilityScoreSkillsInput]
    type: String
}

input FilterFindManyRaceNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyRaceOperatorsInput {
    _id: FilterFindManyRace_idOperatorsInput
    age: FilterFindManyRaceAgeOperatorsInput
    alignment: FilterFindManyRaceAlignmentOperatorsInput
    index: FilterFindManyRaceIndexOperatorsInput
    language_desc: FilterFindManyRaceLanguage_descOperatorsInput
    name: FilterFindManyRaceNameOperatorsInput
    size: FilterFindManyRaceSizeOperatorsInput
    size_description: FilterFindManyRaceSize_descriptionOperatorsInput
    speed: FilterFindManyRaceSpeedOperatorsInput
    url: FilterFindManyRaceUrlOperatorsInput
}

input FilterFindManyRaceSizeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRaceSize_descriptionOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRaceSpeedOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindManyRaceStarting_proficiency_optionsInput {
    choose: Float
    from: [FilterFindManyAbilityScoreSkillsInput]
    type: String
}

input FilterFindManyRaceUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRace_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRuleDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRuleIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRuleInput {
    AND: [FilterFindManyRuleInput!]
    OR: [FilterFindManyRuleInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyRuleOperatorsInput
    desc: String
    index: String
    name: String
    subsections: [FilterFindManyAbilityScoreSkillsInput]
    url: String
}

input FilterFindManyRuleNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyRuleOperatorsInput {
    _id: FilterFindManyRule_idOperatorsInput
    desc: FilterFindManyRuleDescOperatorsInput
    index: FilterFindManyRuleIndexOperatorsInput
    name: FilterFindManyRuleNameOperatorsInput
    url: FilterFindManyRuleUrlOperatorsInput
}

input FilterFindManyRuleSectionDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRuleSectionIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRuleSectionInput {
    AND: [FilterFindManyRuleSectionInput!]
    OR: [FilterFindManyRuleSectionInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyRuleSectionOperatorsInput
    desc: String
    index: String
    name: String
    url: String
}

input FilterFindManyRuleSectionNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyRuleSectionOperatorsInput {
    _id: FilterFindManyRuleSection_idOperatorsInput
    desc: FilterFindManyRuleSectionDescOperatorsInput
    index: FilterFindManyRuleSectionIndexOperatorsInput
    name: FilterFindManyRuleSectionNameOperatorsInput
    url: FilterFindManyRuleSectionUrlOperatorsInput
}

input FilterFindManyRuleSectionUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRuleSection_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRuleUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyRule_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySkillDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySkillIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySkillInput {
    AND: [FilterFindManySkillInput!]
    OR: [FilterFindManySkillInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManySkillOperatorsInput
    ability_score: FilterFindManyAbilityScoreSkillsInput
    desc: [String]
    index: String
    name: String
    url: String
}

input FilterFindManySkillNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManySkillOperatorsInput {
    _id: FilterFindManySkill_idOperatorsInput
    desc: FilterFindManySkillDescOperatorsInput
    index: FilterFindManySkillIndexOperatorsInput
    name: FilterFindManySkillNameOperatorsInput
    url: FilterFindManySkillUrlOperatorsInput
}

input FilterFindManySkillUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySkill_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpellArea_of_effectInput {
    size: Float
    type: String
}

input FilterFindManySpellAttack_typeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpellCasting_timeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpellComponentsOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpellConcentrationOperatorsInput {
    exists: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    nin: [Boolean]
}

input FilterFindManySpellDamageInput {
    damage_at_character_level: JSON
    damage_at_slot_level: JSON
    damage_type: FilterFindManyAbilityScoreSkillsInput
}

input FilterFindManySpellDcInput {
    dc_success: String
    dc_type: FilterFindManyAbilityScoreSkillsInput
    desc: String
}

input FilterFindManySpellDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpellDurationOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpellHigher_levelOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpellIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpellInput {
    AND: [FilterFindManySpellInput!]
    OR: [FilterFindManySpellInput!]
    _id: FilterFindManySpell_idInput
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManySpellOperatorsInput
    area_of_effect: FilterFindManySpellArea_of_effectInput
    attack_type: String
    casting_time: String
    classes: [FilterFindManyAbilityScoreSkillsInput]
    components: [String]
    concentration: Boolean
    damage: FilterFindManySpellDamageInput
    dc: FilterFindManySpellDcInput
    desc: [String]
    duration: String
    heal_at_slot_level: JSON
    higher_level: [String]
    index: String
    level: Float
    material: String
    name: String
    range: String
    ritual: Boolean
    school: FilterFindManyAbilityScoreSkillsInput
    subclasses: [FilterFindManyAbilityScoreSkillsInput]
    url: String
}

input FilterFindManySpellMaterialOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpellNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManySpellOperatorsInput {
    _id: FilterFindManySpell_idOperatorsInput
    attack_type: FilterFindManySpellAttack_typeOperatorsInput
    casting_time: FilterFindManySpellCasting_timeOperatorsInput
    components: FilterFindManySpellComponentsOperatorsInput
    concentration: FilterFindManySpellConcentrationOperatorsInput
    desc: FilterFindManySpellDescOperatorsInput
    duration: FilterFindManySpellDurationOperatorsInput
    higher_level: FilterFindManySpellHigher_levelOperatorsInput
    index: FilterFindManySpellIndexOperatorsInput
    material: FilterFindManySpellMaterialOperatorsInput
    name: FilterFindManySpellNameOperatorsInput
    range: FilterFindManySpellRangeOperatorsInput
    ritual: FilterFindManySpellRitualOperatorsInput
    url: FilterFindManySpellUrlOperatorsInput
}

input FilterFindManySpellRangeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpellRitualOperatorsInput {
    exists: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    nin: [Boolean]
}

input FilterFindManySpellUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySpell_idInput {
    select: JSON
    type: String
}

input FilterFindManySpell_idOperatorsInput {
    type: FilterFindManySpell_idTypeOperatorsInput
}

input FilterFindManySpell_idTypeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySubclassDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySubclassIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySubclassInput {
    AND: [FilterFindManySubclassInput!]
    OR: [FilterFindManySubclassInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManySubclassOperatorsInput
    class: FilterFindManyAbilityScoreSkillsInput
    desc: [String]
    index: String
    name: String
    spells: [FilterFindManySubclassSpellsInput]
    subclass_flavor: String
    subclass_levels: String
    url: String
}

input FilterFindManySubclassNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManySubclassOperatorsInput {
    _id: FilterFindManySubclass_idOperatorsInput
    desc: FilterFindManySubclassDescOperatorsInput
    index: FilterFindManySubclassIndexOperatorsInput
    name: FilterFindManySubclassNameOperatorsInput
    subclass_flavor: FilterFindManySubclassSubclass_flavorOperatorsInput
    subclass_levels: FilterFindManySubclassSubclass_levelsOperatorsInput
    url: FilterFindManySubclassUrlOperatorsInput
}

input FilterFindManySubclassSpellsInput {
    prerequisites: [FilterFindManySubclassSpellsPrerequisitesInput]
    spell: FilterFindManyAbilityScoreSkillsInput
}

input FilterFindManySubclassSpellsPrerequisitesInput {
    index: String
    name: String
    type: String
    url: String
}

input FilterFindManySubclassSubclass_flavorOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySubclassSubclass_levelsOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySubclassUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySubclass_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySubraceAbility_bonusesInput {
    ability_score: FilterFindManyAbilityScoreSkillsInput
    bonus: Float
}

input FilterFindManySubraceDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySubraceIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySubraceInput {
    AND: [FilterFindManySubraceInput!]
    OR: [FilterFindManySubraceInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManySubraceOperatorsInput
    ability_bonuses: [FilterFindManySubraceAbility_bonusesInput]
    desc: String
    index: String
    language_options: FilterFindManySubraceLanguage_optionsInput
    name: String
    race: FilterFindManyAbilityScoreSkillsInput
    racial_traits: [FilterFindManyAbilityScoreSkillsInput]
    starting_proficiencies: [FilterFindManyAbilityScoreSkillsInput]
    url: String
}

input FilterFindManySubraceLanguage_optionsInput {
    choose: Float
    from: [FilterFindManyAbilityScoreSkillsInput]
    type: String
}

input FilterFindManySubraceNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManySubraceOperatorsInput {
    _id: FilterFindManySubrace_idOperatorsInput
    desc: FilterFindManySubraceDescOperatorsInput
    index: FilterFindManySubraceIndexOperatorsInput
    name: FilterFindManySubraceNameOperatorsInput
    url: FilterFindManySubraceUrlOperatorsInput
}

input FilterFindManySubraceUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManySubrace_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyTraitDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyTraitIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyTraitInput {
    AND: [FilterFindManyTraitInput!]
    OR: [FilterFindManyTraitInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyTraitOperatorsInput
    desc: [String]
    index: String
    name: String
    parent: FilterFindManyAbilityScoreSkillsInput
    proficiencies: [FilterFindManyTraitProficienciesInput]
    proficiency_choices: FilterFindManyTraitProficiency_choicesInput
    races: [FilterFindManyAbilityScoreSkillsInput]
    subraces: [FilterFindManyAbilityScoreSkillsInput]
    trait_specific: FilterFindManyTraitTrait_specificInput
    url: String
}

input FilterFindManyTraitNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyTraitOperatorsInput {
    _id: FilterFindManyTrait_idOperatorsInput
    desc: FilterFindManyTraitDescOperatorsInput
    index: FilterFindManyTraitIndexOperatorsInput
    name: FilterFindManyTraitNameOperatorsInput
    url: FilterFindManyTraitUrlOperatorsInput
}

input FilterFindManyTraitProficienciesInput {
    index: String
    name: String
    url: String
}

input FilterFindManyTraitProficiency_choicesInput {
    choose: Float
    from: [FilterFindManyAbilityScoreSkillsInput]
    type: String
}

input FilterFindManyTraitTrait_specificBreath_weaponDamageInput {
    damage_at_character_level: JSON
    damage_type: FilterFindManyAbilityScoreSkillsInput
}

input FilterFindManyTraitTrait_specificBreath_weaponDcInput {
    dc_type: FilterFindManyAbilityScoreSkillsInput
    success_type: String
}

input FilterFindManyTraitTrait_specificBreath_weaponInput {
    damage: [FilterFindManyTraitTrait_specificBreath_weaponDamageInput]
    dc: FilterFindManyTraitTrait_specificBreath_weaponDcInput
    desc: String
    name: String
    usage: FilterFindManyTraitTrait_specificBreath_weaponUsageInput
}

input FilterFindManyTraitTrait_specificBreath_weaponUsageInput {
    times: Float
    type: String
}

input FilterFindManyTraitTrait_specificInput {
    breath_weapon: FilterFindManyTraitTrait_specificBreath_weaponInput
    damage_type: FilterFindManyAbilityScoreSkillsInput
    spell_options: FilterFindManyTraitTrait_specificSubtrait_optionsInput
    subtrait_options: FilterFindManyTraitTrait_specificSubtrait_optionsInput
}

input FilterFindManyTraitTrait_specificSubtrait_optionsInput {
    choose: Float
    from: [AbilityScoreSkillsInput]
    type: String
}

input FilterFindManyTraitUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyTrait_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyWeaponPropertyDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyWeaponPropertyIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyWeaponPropertyInput {
    AND: [FilterFindManyWeaponPropertyInput!]
    OR: [FilterFindManyWeaponPropertyInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindManyWeaponPropertyOperatorsInput
    desc: [String]
    index: String
    name: String
    url: String
}

input FilterFindManyWeaponPropertyNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindManyWeaponPropertyOperatorsInput {
    _id: FilterFindManyWeaponProperty_idOperatorsInput
    desc: FilterFindManyWeaponPropertyDescOperatorsInput
    index: FilterFindManyWeaponPropertyIndexOperatorsInput
    name: FilterFindManyWeaponPropertyNameOperatorsInput
    url: FilterFindManyWeaponPropertyUrlOperatorsInput
}

input FilterFindManyWeaponPropertyUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindManyWeaponProperty_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneAbilityScoreDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneAbilityScoreFull_nameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneAbilityScoreIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneAbilityScoreInput {
    AND: [FilterFindOneAbilityScoreInput!]
    OR: [FilterFindOneAbilityScoreInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneAbilityScoreOperatorsInput
    desc: [String]
    full_name: String
    index: String
    name: String
    skills: [FilterFindOneAbilityScoreSkillsInput]
    url: String
}

input FilterFindOneAbilityScoreNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneAbilityScoreOperatorsInput {
    _id: FilterFindOneAbilityScore_idOperatorsInput
    desc: FilterFindOneAbilityScoreDescOperatorsInput
    full_name: FilterFindOneAbilityScoreFull_nameOperatorsInput
    index: FilterFindOneAbilityScoreIndexOperatorsInput
    name: FilterFindOneAbilityScoreNameOperatorsInput
    url: FilterFindOneAbilityScoreUrlOperatorsInput
}

input FilterFindOneAbilityScoreSkillsInput {
    index: String
    name: String
    url: String
}

input FilterFindOneAbilityScoreUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneAbilityScore_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneAlignmentAbbreviationOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneAlignmentDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneAlignmentIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneAlignmentInput {
    AND: [FilterFindOneAlignmentInput!]
    OR: [FilterFindOneAlignmentInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneAlignmentOperatorsInput
    abbreviation: String
    desc: String
    index: String
    name: String
    url: String
}

input FilterFindOneAlignmentNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneAlignmentOperatorsInput {
    _id: FilterFindOneAlignment_idOperatorsInput
    abbreviation: FilterFindOneAlignmentAbbreviationOperatorsInput
    desc: FilterFindOneAlignmentDescOperatorsInput
    index: FilterFindOneAlignmentIndexOperatorsInput
    name: FilterFindOneAlignmentNameOperatorsInput
    url: FilterFindOneAlignmentUrlOperatorsInput
}

input FilterFindOneAlignmentUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneAlignment_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneBackgroundFeatureInput {
    desc: [String]
    name: String
}

input FilterFindOneBackgroundIdealsFromInput {
    alignments: [FilterFindOneAbilityScoreSkillsInput]
    desc: String
}

input FilterFindOneBackgroundIdealsInput {
    choose: Float
    from: [FilterFindOneBackgroundIdealsFromInput]
    type: String
}

input FilterFindOneBackgroundIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneBackgroundInput {
    AND: [FilterFindOneBackgroundInput!]
    OR: [FilterFindOneBackgroundInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneBackgroundOperatorsInput
    bonds: FilterFindOneBackgroundPersonality_traitsInput
    feature: FilterFindOneBackgroundFeatureInput
    flaws: FilterFindOneBackgroundPersonality_traitsInput
    ideals: FilterFindOneBackgroundIdealsInput
    index: String
    language_options: FilterFindOneBackgroundLanguage_optionsInput
    name: String
    personality_traits: FilterFindOneBackgroundPersonality_traitsInput
    starting_equipment: [FilterFindOneBackgroundStarting_equipmentInput]
    starting_equipment_options: [FilterFindOneBackgroundStarting_equipment_optionsInput]
    starting_proficiencies: [FilterFindOneAbilityScoreSkillsInput]
    url: String
}

input FilterFindOneBackgroundLanguage_optionsInput {
    choose: Float
    from: [FilterFindOneAbilityScoreSkillsInput]
    type: String
}

input FilterFindOneBackgroundNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneBackgroundOperatorsInput {
    _id: FilterFindOneBackground_idOperatorsInput
    index: FilterFindOneBackgroundIndexOperatorsInput
    name: FilterFindOneBackgroundNameOperatorsInput
    url: FilterFindOneBackgroundUrlOperatorsInput
}

input FilterFindOneBackgroundPersonality_traitsInput {
    choose: Float
    from: [String]
    type: String
}

input FilterFindOneBackgroundStarting_equipmentInput {
    equipment: FilterFindOneAbilityScoreSkillsInput
    quantity: Float
}

input FilterFindOneBackgroundStarting_equipment_optionsFromInput {
    equipment: FilterFindOneAbilityScoreSkillsInput
    quantity: Float
}

input FilterFindOneBackgroundStarting_equipment_optionsInput {
    choose: Float
    from: [FilterFindOneBackgroundStarting_equipment_optionsFromInput]
    type: String
}

input FilterFindOneBackgroundUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneBackground_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneClassClass_levelsOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneClassHit_dieOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneClassIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneClassInput {
    AND: [FilterFindOneClassInput!]
    OR: [FilterFindOneClassInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneClassOperatorsInput
    class_levels: String
    hit_die: Float
    index: String
    multi_classing: FilterFindOneClassMulti_classingInput
    name: String
    proficiencies: [FilterFindOneAbilityScoreSkillsInput]
    proficiency_choices: [FilterFindOneClassMulti_classingProficiency_choicesInput]
    saving_throws: [FilterFindOneAbilityScoreSkillsInput]
    spellcasting: FilterFindOneClassSpellcastingInput
    spells: String
    starting_equipment: [FilterFindOneClassStarting_equipmentInput]
    starting_equipment_options: [FilterFindOneClassStarting_equipment_optionsInput]
    subclasses: [FilterFindOneAbilityScoreSkillsInput]
    url: String
}

input FilterFindOneClassMulti_classingInput {
    prerequisite_options: FilterFindOneClassMulti_classingPrerequisite_optionsInput
    prerequisites: [FilterFindOneClassMulti_classingPrerequisitesInput]
    proficiencies: [FilterFindOneAbilityScoreSkillsInput]
    proficiency_choices: [FilterFindOneClassMulti_classingProficiency_choicesInput]
}

input FilterFindOneClassMulti_classingPrerequisite_optionsInput {
    choose: Float
    from: [FilterFindOneClassMulti_classingPrerequisitesInput]
    type: String
}

input FilterFindOneClassMulti_classingPrerequisitesInput {
    ability_score: AbilityScoreSkillsInput
    minimum_score: Float
}

input FilterFindOneClassMulti_classingProficiency_choicesInput {
    choose: Float
    from: [AbilityScoreSkillsInput]
    type: String
}

input FilterFindOneClassNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneClassOperatorsInput {
    _id: FilterFindOneClass_idOperatorsInput
    class_levels: FilterFindOneClassClass_levelsOperatorsInput
    hit_die: FilterFindOneClassHit_dieOperatorsInput
    index: FilterFindOneClassIndexOperatorsInput
    name: FilterFindOneClassNameOperatorsInput
    spells: FilterFindOneClassSpellsOperatorsInput
    url: FilterFindOneClassUrlOperatorsInput
}

input FilterFindOneClassSpellcastingInfoInput {
    desc: [String]
    name: String
}

input FilterFindOneClassSpellcastingInput {
    info: [FilterFindOneClassSpellcastingInfoInput]
    level: Float
    spellcasting_ability: FilterFindOneAbilityScoreSkillsInput
}

input FilterFindOneClassSpellsOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneClassStarting_equipmentInput {
    equipment: FilterFindOneAbilityScoreSkillsInput
    quantity: Float
}

input FilterFindOneClassStarting_equipment_optionsFromInput {
    equipment: FilterFindOneAbilityScoreSkillsInput
    quantity: Float
}

input FilterFindOneClassStarting_equipment_optionsInput {
    choose: Float
    from: [FilterFindOneClassStarting_equipment_optionsFromInput]
    type: String
}

input FilterFindOneClassUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneClass_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneConditionDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneConditionIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneConditionInput {
    AND: [FilterFindOneConditionInput!]
    OR: [FilterFindOneConditionInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneConditionOperatorsInput
    desc: [String]
    index: String
    name: String
    url: String
}

input FilterFindOneConditionNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneConditionOperatorsInput {
    _id: FilterFindOneCondition_idOperatorsInput
    desc: FilterFindOneConditionDescOperatorsInput
    index: FilterFindOneConditionIndexOperatorsInput
    name: FilterFindOneConditionNameOperatorsInput
    url: FilterFindOneConditionUrlOperatorsInput
}

input FilterFindOneConditionUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneCondition_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneDamageTypeDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneDamageTypeIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneDamageTypeInput {
    AND: [FilterFindOneDamageTypeInput!]
    OR: [FilterFindOneDamageTypeInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneDamageTypeOperatorsInput
    desc: [String]
    index: String
    name: String
    url: String
}

input FilterFindOneDamageTypeNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneDamageTypeOperatorsInput {
    _id: FilterFindOneDamageType_idOperatorsInput
    desc: FilterFindOneDamageTypeDescOperatorsInput
    index: FilterFindOneDamageTypeIndexOperatorsInput
    name: FilterFindOneDamageTypeNameOperatorsInput
    url: FilterFindOneDamageTypeUrlOperatorsInput
}

input FilterFindOneDamageTypeUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneDamageType_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentArmor_categoryOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentArmor_classInput {
    base: Float
    dex_bonus: Boolean
    max_bonus: Float
}

input FilterFindOneEquipmentCapacityOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentCategoryIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentCategoryInput {
    AND: [FilterFindOneEquipmentCategoryInput!]
    OR: [FilterFindOneEquipmentCategoryInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneEquipmentCategoryOperatorsInput
    equipment: [FilterFindOneAbilityScoreSkillsInput]
    index: String
    name: String
    url: String
}

input FilterFindOneEquipmentCategoryNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneEquipmentCategoryOperatorsInput {
    _id: FilterFindOneEquipmentCategory_idOperatorsInput
    index: FilterFindOneEquipmentCategoryIndexOperatorsInput
    name: FilterFindOneEquipmentCategoryNameOperatorsInput
    url: FilterFindOneEquipmentCategoryUrlOperatorsInput
}

input FilterFindOneEquipmentCategoryUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentCategory_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentCategory_rangeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentContentsInput {
    item: FilterFindOneAbilityScoreSkillsInput
    quantity: Float
}

input FilterFindOneEquipmentCostInput {
    quantity: Float
    unit: String
}

input FilterFindOneEquipmentDamageInput {
    damage_dice: String
    damage_type: FilterFindOneAbilityScoreSkillsInput
}

input FilterFindOneEquipmentDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentInput {
    AND: [FilterFindOneEquipmentInput!]
    OR: [FilterFindOneEquipmentInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneEquipmentOperatorsInput
    armor_category: String
    armor_class: FilterFindOneEquipmentArmor_classInput
    capacity: String
    category_range: String
    contents: [FilterFindOneEquipmentContentsInput]
    cost: FilterFindOneEquipmentCostInput
    damage: FilterFindOneEquipmentDamageInput
    desc: [String]
    equipment_category: FilterFindOneAbilityScoreSkillsInput
    gear_category: FilterFindOneAbilityScoreSkillsInput
    index: String
    name: String
    properties: [FilterFindOneAbilityScoreSkillsInput]
    quantity: Float
    range: FilterFindOneEquipmentRangeInput
    special: [String]
    speed: FilterFindOneEquipmentSpeedInput
    stealth_disadvantage: Boolean
    str_minimum: Float
    throw_range: FilterFindOneEquipmentThrow_rangeInput
    tool_category: String
    two_handed_damage: FilterFindOneEquipmentTwo_handed_damageInput
    url: String
    vehicle_category: String
    weapon_category: String
    weapon_range: String
    weight: Float
}

input FilterFindOneEquipmentNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneEquipmentOperatorsInput {
    _id: FilterFindOneEquipment_idOperatorsInput
    armor_category: FilterFindOneEquipmentArmor_categoryOperatorsInput
    capacity: FilterFindOneEquipmentCapacityOperatorsInput
    category_range: FilterFindOneEquipmentCategory_rangeOperatorsInput
    desc: FilterFindOneEquipmentDescOperatorsInput
    index: FilterFindOneEquipmentIndexOperatorsInput
    name: FilterFindOneEquipmentNameOperatorsInput
    quantity: FilterFindOneEquipmentQuantityOperatorsInput
    special: FilterFindOneEquipmentSpecialOperatorsInput
    stealth_disadvantage: FilterFindOneEquipmentStealth_disadvantageOperatorsInput
    str_minimum: FilterFindOneEquipmentStr_minimumOperatorsInput
    tool_category: FilterFindOneEquipmentTool_categoryOperatorsInput
    url: FilterFindOneEquipmentUrlOperatorsInput
    vehicle_category: FilterFindOneEquipmentVehicle_categoryOperatorsInput
    weapon_category: FilterFindOneEquipmentWeapon_categoryOperatorsInput
    weapon_range: FilterFindOneEquipmentWeapon_rangeOperatorsInput
    weight: FilterFindOneEquipmentWeightOperatorsInput
}

input FilterFindOneEquipmentQuantityOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneEquipmentRangeInput {
    long: Float
    normal: Float
}

input FilterFindOneEquipmentSpecialOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentSpeedInput {
    quantity: Float
    unit: String
}

input FilterFindOneEquipmentStealth_disadvantageOperatorsInput {
    exists: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    nin: [Boolean]
}

input FilterFindOneEquipmentStr_minimumOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneEquipmentThrow_rangeInput {
    long: Float
    normal: Float
}

input FilterFindOneEquipmentTool_categoryOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentTwo_handed_damageInput {
    damage_dice: String
    damage_type: FilterFindOneAbilityScoreSkillsInput
}

input FilterFindOneEquipmentUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentVehicle_categoryOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentWeapon_categoryOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentWeapon_rangeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneEquipmentWeightOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneEquipment_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneFeatDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneFeatIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneFeatInput {
    AND: [FilterFindOneFeatInput!]
    OR: [FilterFindOneFeatInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneFeatOperatorsInput
    desc: [String]
    index: String
    name: String
    prerequisites: [FilterFindOneFeatPrerequisitesInput]
    url: String
}

input FilterFindOneFeatNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneFeatOperatorsInput {
    _id: FilterFindOneFeat_idOperatorsInput
    desc: FilterFindOneFeatDescOperatorsInput
    index: FilterFindOneFeatIndexOperatorsInput
    name: FilterFindOneFeatNameOperatorsInput
    url: FilterFindOneFeatUrlOperatorsInput
}

input FilterFindOneFeatPrerequisitesInput {
    ability_score: FilterFindOneAbilityScoreSkillsInput
    minimum_score: Float
}

input FilterFindOneFeatUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneFeat_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneFeatureChoiceInput {
    choose: Float
    from: [AbilityScoreSkillsInput]
    type: String
}

input FilterFindOneFeatureDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneFeatureFeature_specificInput {
    expertise_options: FilterFindOneFeatureChoiceInput
    subfeature_options: FilterFindOneFeatureChoiceInput
}

input FilterFindOneFeatureIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneFeatureInput {
    AND: [FilterFindOneFeatureInput!]
    OR: [FilterFindOneFeatureInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneFeatureOperatorsInput
    choice: FilterFindOneFeatureChoiceInput
    class: FilterFindOneAbilityScoreSkillsInput
    desc: [String]
    feature_specific: FilterFindOneFeatureFeature_specificInput
    index: String
    level: Float
    name: String
    parent: FilterFindOneAbilityScoreSkillsInput
    prerequisites: [FilterFindOneFeaturePrerequisitesInput]
    reference: String
    subclass: FilterFindOneAbilityScoreSkillsInput
    url: String
}

input FilterFindOneFeatureLevelOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneFeatureNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneFeatureOperatorsInput {
    _id: FilterFindOneFeature_idOperatorsInput
    desc: FilterFindOneFeatureDescOperatorsInput
    index: FilterFindOneFeatureIndexOperatorsInput
    level: FilterFindOneFeatureLevelOperatorsInput
    name: FilterFindOneFeatureNameOperatorsInput
    reference: FilterFindOneFeatureReferenceOperatorsInput
    url: FilterFindOneFeatureUrlOperatorsInput
}

input FilterFindOneFeaturePrerequisitesInput {
    level: Float
    type: String
}

input FilterFindOneFeatureReferenceOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneFeatureUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneFeature_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneLanguageDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneLanguageIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneLanguageInput {
    AND: [FilterFindOneLanguageInput!]
    OR: [FilterFindOneLanguageInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneLanguageOperatorsInput
    desc: String
    index: String
    name: String
    script: String
    type: String
    typical_speakers: [String]
    url: String
}

input FilterFindOneLanguageNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneLanguageOperatorsInput {
    _id: FilterFindOneLanguage_idOperatorsInput
    desc: FilterFindOneLanguageDescOperatorsInput
    index: FilterFindOneLanguageIndexOperatorsInput
    name: FilterFindOneLanguageNameOperatorsInput
    script: FilterFindOneLanguageScriptOperatorsInput
    type: FilterFindOneLanguageTypeOperatorsInput
    typical_speakers: FilterFindOneLanguageTypical_speakersOperatorsInput
    url: FilterFindOneLanguageUrlOperatorsInput
}

input FilterFindOneLanguageScriptOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneLanguageTypeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneLanguageTypical_speakersOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneLanguageUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneLanguage_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneLevelAbility_score_bonusesOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneLevelClass_specificCreating_spell_slotsInput {
    sorcery_point_cost: Float
    spell_slot_level: Float
}

input FilterFindOneLevelClass_specificInput {
    action_surges: Float
    arcane_recovery_levels: Float
    aura_range: Float
    bardic_inspiration_die: Float
    brutal_critical_dice: Float
    channel_divinity_charges: Float
    creating_spell_slots: [FilterFindOneLevelClass_specificCreating_spell_slotsInput]
    destroy_undead_cr: Float
    extra_attacks: Float
    favored_enemies: Float
    favored_terrain: Float
    indomitable_uses: Float
    invocations_known: Float
    ki_points: Float
    magical_secrets_max_5: Float
    magical_secrets_max_7: Float
    magical_secrets_max_9: Float
    martial_arts: FilterFindOneLevelClass_specificMartial_artsInput
    metamagic_known: Float
    mystic_arcanum_level_6: Float
    mystic_arcanum_level_7: Float
    mystic_arcanum_level_8: Float
    mystic_arcanum_level_9: Float
    rage_count: Float
    rage_damage_bonus: Float
    sneak_attack: FilterFindOneLevelClass_specificSneak_attackInput
    song_of_rest_die: Float
    sorcery_points: Float
    unarmored_movement: Float
    wild_shape_fly: Boolean
    wild_shape_max_cr: Float
    wild_shape_swim: Boolean
}

input FilterFindOneLevelClass_specificMartial_artsInput {
    dice_count: Float
    dice_value: Float
}

input FilterFindOneLevelClass_specificSneak_attackInput {
    dice_count: Float
    dice_value: Float
}

input FilterFindOneLevelIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneLevelInput {
    AND: [FilterFindOneLevelInput!]
    OR: [FilterFindOneLevelInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneLevelOperatorsInput
    ability_score_bonuses: Float
    class: FilterFindOneAbilityScoreSkillsInput
    class_specific: FilterFindOneLevelClass_specificInput
    features: [FilterFindOneAbilityScoreSkillsInput]
    index: String
    level: Float
    prof_bonus: Float
    spellcasting: FilterFindOneLevelSpellcastingInput
    subclass: FilterFindOneAbilityScoreSkillsInput
    subclass_specific: FilterFindOneLevelSubclass_specificInput
    url: String
}

input FilterFindOneLevelLevelOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneLevelOperatorsInput {
    _id: FilterFindOneLevel_idOperatorsInput
    ability_score_bonuses: FilterFindOneLevelAbility_score_bonusesOperatorsInput
    index: FilterFindOneLevelIndexOperatorsInput
    level: FilterFindOneLevelLevelOperatorsInput
    prof_bonus: FilterFindOneLevelProf_bonusOperatorsInput
    url: FilterFindOneLevelUrlOperatorsInput
}

input FilterFindOneLevelProf_bonusOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneLevelSpellcastingInput {
    cantrips_known: Float
    spell_slots_level_1: Float
    spell_slots_level_2: Float
    spell_slots_level_3: Float
    spell_slots_level_4: Float
    spell_slots_level_5: Float
    spell_slots_level_6: Float
    spell_slots_level_7: Float
    spell_slots_level_8: Float
    spell_slots_level_9: Float
    spells_known: Float
}

input FilterFindOneLevelSubclass_specificInput {
    additional_magical_secrets_max_lvl: Float
    aura_range: Float
}

input FilterFindOneLevelUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneLevel_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMagicItemDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMagicItemIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMagicItemInput {
    AND: [FilterFindOneMagicItemInput!]
    OR: [FilterFindOneMagicItemInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneMagicItemOperatorsInput
    desc: [String]
    equipment_category: FilterFindOneAbilityScoreSkillsInput
    index: String
    name: String
    rarity: FilterFindOneMagicItemRarityInput
    url: String
    variant: Boolean
    variants: [FilterFindOneAbilityScoreSkillsInput]
}

input FilterFindOneMagicItemNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneMagicItemOperatorsInput {
    _id: FilterFindOneMagicItem_idOperatorsInput
    desc: FilterFindOneMagicItemDescOperatorsInput
    index: FilterFindOneMagicItemIndexOperatorsInput
    name: FilterFindOneMagicItemNameOperatorsInput
    url: FilterFindOneMagicItemUrlOperatorsInput
}

input FilterFindOneMagicItemRarityInput {
    name: String
}

input FilterFindOneMagicItemUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMagicItem_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMagicSchoolDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMagicSchoolIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMagicSchoolInput {
    AND: [FilterFindOneMagicSchoolInput!]
    OR: [FilterFindOneMagicSchoolInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneMagicSchoolOperatorsInput
    desc: String
    index: String
    name: String
    url: String
}

input FilterFindOneMagicSchoolNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneMagicSchoolOperatorsInput {
    _id: FilterFindOneMagicSchool_idOperatorsInput
    desc: FilterFindOneMagicSchoolDescOperatorsInput
    index: FilterFindOneMagicSchoolIndexOperatorsInput
    name: FilterFindOneMagicSchoolNameOperatorsInput
    url: FilterFindOneMagicSchoolUrlOperatorsInput
}

input FilterFindOneMagicSchoolUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMagicSchool_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterActionsAttack_optionsFromInput {
    damage: [MonsterActionsDamageInput]
    dc: MonsterActionsDcInput
    name: String
}

input FilterFindOneMonsterActionsAttack_optionsInput {
    choose: Float
    from: [FilterFindOneMonsterActionsAttack_optionsFromInput]
    type: String
}

input FilterFindOneMonsterActionsDamageInput {
    damage_dice: String
    damage_type: AbilityScoreSkillsInput
}

input FilterFindOneMonsterActionsDcInput {
    dc_type: AbilityScoreSkillsInput
    dc_value: Float
    success_type: String
}

input FilterFindOneMonsterActionsInput {
    attack_bonus: Float
    attack_options: FilterFindOneMonsterActionsAttack_optionsInput
    attacks: [FilterFindOneMonsterActionsAttack_optionsFromInput]
    damage: [FilterFindOneMonsterActionsDamageInput]
    dc: FilterFindOneMonsterActionsDcInput
    desc: String
    name: String
    options: FilterFindOneMonsterActionsOptionsInput
    usage: FilterFindOneMonsterActionsUsageInput
}

input FilterFindOneMonsterActionsOptionsFromInput {
    count: JSON
    name: String
    type: String
}

input FilterFindOneMonsterActionsOptionsInput {
    choose: Float
    from: [FilterFindOneMonsterActionsOptionsFromInput]
}

input FilterFindOneMonsterActionsUsageInput {
    dice: String
    min_value: Float
    type: String
}

input FilterFindOneMonsterAlignmentOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterArmor_classOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneMonsterChallenge_ratingOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneMonsterCharismaOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneMonsterConstitutionOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneMonsterDamage_immunitiesOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterDamage_resistancesOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterDamage_vulnerabilitiesOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterDexterityOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneMonsterHit_diceOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterHit_pointsOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneMonsterIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterInput {
    AND: [FilterFindOneMonsterInput!]
    OR: [FilterFindOneMonsterInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneMonsterOperatorsInput
    actions: [FilterFindOneMonsterActionsInput]
    alignment: String
    armor_class: Float
    challenge_rating: Float
    charisma: Float
    condition_immunities: [FilterFindOneAbilityScoreSkillsInput]
    constitution: Float
    damage_immunities: [String]
    damage_resistances: [String]
    damage_vulnerabilities: [String]
    dexterity: Float
    forms: [FilterFindOneAbilityScoreSkillsInput]
    hit_dice: String
    hit_points: Float
    index: String
    intelligence: Float
    languages: String
    legendary_actions: [FilterFindOneMonsterLegendary_actionsInput]
    name: String
    proficiencies: [FilterFindOneMonsterProficienciesInput]
    reactions: [FilterFindOneMonsterReactionsInput]
    senses: FilterFindOneMonsterSensesInput
    size: String
    special_abilities: [FilterFindOneMonsterSpecial_abilitiesInput]
    speed: FilterFindOneMonsterSpeedInput
    strength: Float
    subtype: String
    type: String
    url: String
    wisdom: Float
    xp: Float
}

input FilterFindOneMonsterIntelligenceOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneMonsterLanguagesOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterLegendary_actionsInput {
    attack_bonus: Float
    damage: [FilterFindOneMonsterActionsDamageInput]
    dc: FilterFindOneMonsterActionsDcInput
    desc: String
    name: String
}

input FilterFindOneMonsterNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneMonsterOperatorsInput {
    _id: FilterFindOneMonster_idOperatorsInput
    alignment: FilterFindOneMonsterAlignmentOperatorsInput
    armor_class: FilterFindOneMonsterArmor_classOperatorsInput
    challenge_rating: FilterFindOneMonsterChallenge_ratingOperatorsInput
    charisma: FilterFindOneMonsterCharismaOperatorsInput
    constitution: FilterFindOneMonsterConstitutionOperatorsInput
    damage_immunities: FilterFindOneMonsterDamage_immunitiesOperatorsInput
    damage_resistances: FilterFindOneMonsterDamage_resistancesOperatorsInput
    damage_vulnerabilities: FilterFindOneMonsterDamage_vulnerabilitiesOperatorsInput
    dexterity: FilterFindOneMonsterDexterityOperatorsInput
    hit_dice: FilterFindOneMonsterHit_diceOperatorsInput
    hit_points: FilterFindOneMonsterHit_pointsOperatorsInput
    index: FilterFindOneMonsterIndexOperatorsInput
    intelligence: FilterFindOneMonsterIntelligenceOperatorsInput
    languages: FilterFindOneMonsterLanguagesOperatorsInput
    name: FilterFindOneMonsterNameOperatorsInput
    size: FilterFindOneMonsterSizeOperatorsInput
    strength: FilterFindOneMonsterStrengthOperatorsInput
    subtype: FilterFindOneMonsterSubtypeOperatorsInput
    type: FilterFindOneMonsterTypeOperatorsInput
    url: FilterFindOneMonsterUrlOperatorsInput
    wisdom: FilterFindOneMonsterWisdomOperatorsInput
    xp: FilterFindOneMonsterXpOperatorsInput
}

input FilterFindOneMonsterProficienciesInput {
    proficiency: FilterFindOneAbilityScoreSkillsInput
    value: Float
}

input FilterFindOneMonsterReactionsInput {
    dc: FilterFindOneMonsterActionsDcInput
    desc: String
    name: String
}

input FilterFindOneMonsterSensesInput {
    blindsight: String
    darkvision: String
    passive_perception: Float
    tremorsense: String
    truesight: String
}

input FilterFindOneMonsterSizeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterSpecial_abilitiesInput {
    attack_bonus: Float
    damage: [FilterFindOneMonsterActionsDamageInput]
    dc: FilterFindOneMonsterActionsDcInput
    desc: String
    name: String
    spellcasting: FilterFindOneMonsterSpecial_abilitiesSpellcastingInput
    usage: FilterFindOneMonsterSpecial_abilitiesSpellcastingSpellsUsageInput
}

input FilterFindOneMonsterSpecial_abilitiesSpellcastingInput {
    ability: FilterFindOneAbilityScoreSkillsInput
    components_required: [String]
    dc: Float
    level: Float
    modifier: Float
    school: String
    slots: JSON
    spells: [FilterFindOneMonsterSpecial_abilitiesSpellcastingSpellsInput]
}

input FilterFindOneMonsterSpecial_abilitiesSpellcastingSpellsInput {
    level: Float
    name: String
    notes: String
    url: String
    usage: FilterFindOneMonsterSpecial_abilitiesSpellcastingSpellsUsageInput
}

input FilterFindOneMonsterSpecial_abilitiesSpellcastingSpellsUsageInput {
    rest_types: [String]
    times: Float
    type: String
}

input FilterFindOneMonsterSpeedInput {
    burrow: String
    climb: String
    fly: String
    hover: Boolean
    swim: String
    walk: String
}

input FilterFindOneMonsterStrengthOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneMonsterSubtypeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterTypeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneMonsterWisdomOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneMonsterXpOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneMonster_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneProficiencyIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneProficiencyInput {
    AND: [FilterFindOneProficiencyInput!]
    OR: [FilterFindOneProficiencyInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneProficiencyOperatorsInput
    classes: [FilterFindOneAbilityScoreSkillsInput]
    index: String
    name: String
    races: [FilterFindOneAbilityScoreSkillsInput]
    reference: FilterFindOneProficiencyReferenceInput
    type: String
    url: String
}

input FilterFindOneProficiencyNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneProficiencyOperatorsInput {
    _id: FilterFindOneProficiency_idOperatorsInput
    index: FilterFindOneProficiencyIndexOperatorsInput
    name: FilterFindOneProficiencyNameOperatorsInput
    type: FilterFindOneProficiencyTypeOperatorsInput
    url: FilterFindOneProficiencyUrlOperatorsInput
}

input FilterFindOneProficiencyReferenceInput {
    index: String
    name: String
    type: String
    url: String
}

input FilterFindOneProficiencyTypeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneProficiencyUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneProficiency_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRaceAbility_bonus_optionsFromInput {
    ability_score: FilterFindOneAbilityScoreSkillsInput
    bonus: Float
}

input FilterFindOneRaceAbility_bonus_optionsInput {
    choose: Float
    from: [FilterFindOneRaceAbility_bonus_optionsFromInput]
    type: String
}

input FilterFindOneRaceAbility_bonusesInput {
    ability_score: FilterFindOneAbilityScoreSkillsInput
    bonus: Float
}

input FilterFindOneRaceAgeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRaceAlignmentOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRaceIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRaceInput {
    AND: [FilterFindOneRaceInput!]
    OR: [FilterFindOneRaceInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneRaceOperatorsInput
    ability_bonus_options: FilterFindOneRaceAbility_bonus_optionsInput
    ability_bonuses: [FilterFindOneRaceAbility_bonusesInput]
    age: String
    alignment: String
    index: String
    language_desc: String
    language_options: FilterFindOneRaceLanguage_optionsInput
    languages: [FilterFindOneAbilityScoreSkillsInput]
    name: String
    size: String
    size_description: String
    speed: Float
    starting_proficiencies: [FilterFindOneAbilityScoreSkillsInput]
    starting_proficiency_options: FilterFindOneRaceStarting_proficiency_optionsInput
    subraces: [FilterFindOneAbilityScoreSkillsInput]
    traits: [FilterFindOneAbilityScoreSkillsInput]
    url: String
}

input FilterFindOneRaceLanguage_descOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRaceLanguage_optionsInput {
    choose: Float
    from: [FilterFindOneAbilityScoreSkillsInput]
    type: String
}

input FilterFindOneRaceNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneRaceOperatorsInput {
    _id: FilterFindOneRace_idOperatorsInput
    age: FilterFindOneRaceAgeOperatorsInput
    alignment: FilterFindOneRaceAlignmentOperatorsInput
    index: FilterFindOneRaceIndexOperatorsInput
    language_desc: FilterFindOneRaceLanguage_descOperatorsInput
    name: FilterFindOneRaceNameOperatorsInput
    size: FilterFindOneRaceSizeOperatorsInput
    size_description: FilterFindOneRaceSize_descriptionOperatorsInput
    speed: FilterFindOneRaceSpeedOperatorsInput
    url: FilterFindOneRaceUrlOperatorsInput
}

input FilterFindOneRaceSizeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRaceSize_descriptionOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRaceSpeedOperatorsInput {
    exists: Boolean
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input FilterFindOneRaceStarting_proficiency_optionsInput {
    choose: Float
    from: [FilterFindOneAbilityScoreSkillsInput]
    type: String
}

input FilterFindOneRaceUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRace_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRuleDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRuleIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRuleInput {
    AND: [FilterFindOneRuleInput!]
    OR: [FilterFindOneRuleInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneRuleOperatorsInput
    desc: String
    index: String
    name: String
    subsections: [FilterFindOneAbilityScoreSkillsInput]
    url: String
}

input FilterFindOneRuleNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneRuleOperatorsInput {
    _id: FilterFindOneRule_idOperatorsInput
    desc: FilterFindOneRuleDescOperatorsInput
    index: FilterFindOneRuleIndexOperatorsInput
    name: FilterFindOneRuleNameOperatorsInput
    url: FilterFindOneRuleUrlOperatorsInput
}

input FilterFindOneRuleSectionDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRuleSectionIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRuleSectionInput {
    AND: [FilterFindOneRuleSectionInput!]
    OR: [FilterFindOneRuleSectionInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneRuleSectionOperatorsInput
    desc: String
    index: String
    name: String
    url: String
}

input FilterFindOneRuleSectionNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneRuleSectionOperatorsInput {
    _id: FilterFindOneRuleSection_idOperatorsInput
    desc: FilterFindOneRuleSectionDescOperatorsInput
    index: FilterFindOneRuleSectionIndexOperatorsInput
    name: FilterFindOneRuleSectionNameOperatorsInput
    url: FilterFindOneRuleSectionUrlOperatorsInput
}

input FilterFindOneRuleSectionUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRuleSection_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRuleUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneRule_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSkillDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSkillIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSkillInput {
    AND: [FilterFindOneSkillInput!]
    OR: [FilterFindOneSkillInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneSkillOperatorsInput
    ability_score: FilterFindOneAbilityScoreSkillsInput
    desc: [String]
    index: String
    name: String
    url: String
}

input FilterFindOneSkillNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneSkillOperatorsInput {
    _id: FilterFindOneSkill_idOperatorsInput
    desc: FilterFindOneSkillDescOperatorsInput
    index: FilterFindOneSkillIndexOperatorsInput
    name: FilterFindOneSkillNameOperatorsInput
    url: FilterFindOneSkillUrlOperatorsInput
}

input FilterFindOneSkillUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSkill_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpellArea_of_effectInput {
    size: Float
    type: String
}

input FilterFindOneSpellAttack_typeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpellCasting_timeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpellComponentsOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpellConcentrationOperatorsInput {
    exists: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    nin: [Boolean]
}

input FilterFindOneSpellDamageInput {
    damage_at_character_level: JSON
    damage_at_slot_level: JSON
    damage_type: FilterFindOneAbilityScoreSkillsInput
}

input FilterFindOneSpellDcInput {
    dc_success: String
    dc_type: FilterFindOneAbilityScoreSkillsInput
    desc: String
}

input FilterFindOneSpellDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpellDurationOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpellHigher_levelOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpellIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpellInput {
    AND: [FilterFindOneSpellInput!]
    OR: [FilterFindOneSpellInput!]
    _id: FilterFindOneSpell_idInput
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneSpellOperatorsInput
    area_of_effect: FilterFindOneSpellArea_of_effectInput
    attack_type: String
    casting_time: String
    classes: [FilterFindOneAbilityScoreSkillsInput]
    components: [String]
    concentration: Boolean
    damage: FilterFindOneSpellDamageInput
    dc: FilterFindOneSpellDcInput
    desc: [String]
    duration: String
    heal_at_slot_level: JSON
    higher_level: [String]
    index: String
    level: Float
    material: String
    name: String
    range: String
    ritual: Boolean
    school: FilterFindOneAbilityScoreSkillsInput
    subclasses: [FilterFindOneAbilityScoreSkillsInput]
    url: String
}

input FilterFindOneSpellMaterialOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpellNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneSpellOperatorsInput {
    _id: FilterFindOneSpell_idOperatorsInput
    attack_type: FilterFindOneSpellAttack_typeOperatorsInput
    casting_time: FilterFindOneSpellCasting_timeOperatorsInput
    components: FilterFindOneSpellComponentsOperatorsInput
    concentration: FilterFindOneSpellConcentrationOperatorsInput
    desc: FilterFindOneSpellDescOperatorsInput
    duration: FilterFindOneSpellDurationOperatorsInput
    higher_level: FilterFindOneSpellHigher_levelOperatorsInput
    index: FilterFindOneSpellIndexOperatorsInput
    material: FilterFindOneSpellMaterialOperatorsInput
    name: FilterFindOneSpellNameOperatorsInput
    range: FilterFindOneSpellRangeOperatorsInput
    ritual: FilterFindOneSpellRitualOperatorsInput
    url: FilterFindOneSpellUrlOperatorsInput
}

input FilterFindOneSpellRangeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpellRitualOperatorsInput {
    exists: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    nin: [Boolean]
}

input FilterFindOneSpellUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSpell_idInput {
    select: JSON
    type: String
}

input FilterFindOneSpell_idOperatorsInput {
    type: FilterFindOneSpell_idTypeOperatorsInput
}

input FilterFindOneSpell_idTypeOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSubclassDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSubclassIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSubclassInput {
    AND: [FilterFindOneSubclassInput!]
    OR: [FilterFindOneSubclassInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneSubclassOperatorsInput
    class: FilterFindOneAbilityScoreSkillsInput
    desc: [String]
    index: String
    name: String
    spells: [FilterFindOneSubclassSpellsInput]
    subclass_flavor: String
    subclass_levels: String
    url: String
}

input FilterFindOneSubclassNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneSubclassOperatorsInput {
    _id: FilterFindOneSubclass_idOperatorsInput
    desc: FilterFindOneSubclassDescOperatorsInput
    index: FilterFindOneSubclassIndexOperatorsInput
    name: FilterFindOneSubclassNameOperatorsInput
    subclass_flavor: FilterFindOneSubclassSubclass_flavorOperatorsInput
    subclass_levels: FilterFindOneSubclassSubclass_levelsOperatorsInput
    url: FilterFindOneSubclassUrlOperatorsInput
}

input FilterFindOneSubclassSpellsInput {
    prerequisites: [FilterFindOneSubclassSpellsPrerequisitesInput]
    spell: FilterFindOneAbilityScoreSkillsInput
}

input FilterFindOneSubclassSpellsPrerequisitesInput {
    index: String
    name: String
    type: String
    url: String
}

input FilterFindOneSubclassSubclass_flavorOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSubclassSubclass_levelsOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSubclassUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSubclass_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSubraceAbility_bonusesInput {
    ability_score: FilterFindOneAbilityScoreSkillsInput
    bonus: Float
}

input FilterFindOneSubraceDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSubraceIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSubraceInput {
    AND: [FilterFindOneSubraceInput!]
    OR: [FilterFindOneSubraceInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneSubraceOperatorsInput
    ability_bonuses: [FilterFindOneSubraceAbility_bonusesInput]
    desc: String
    index: String
    language_options: FilterFindOneSubraceLanguage_optionsInput
    name: String
    race: FilterFindOneAbilityScoreSkillsInput
    racial_traits: [FilterFindOneAbilityScoreSkillsInput]
    starting_proficiencies: [FilterFindOneAbilityScoreSkillsInput]
    url: String
}

input FilterFindOneSubraceLanguage_optionsInput {
    choose: Float
    from: [FilterFindOneAbilityScoreSkillsInput]
    type: String
}

input FilterFindOneSubraceNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneSubraceOperatorsInput {
    _id: FilterFindOneSubrace_idOperatorsInput
    desc: FilterFindOneSubraceDescOperatorsInput
    index: FilterFindOneSubraceIndexOperatorsInput
    name: FilterFindOneSubraceNameOperatorsInput
    url: FilterFindOneSubraceUrlOperatorsInput
}

input FilterFindOneSubraceUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneSubrace_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneTraitDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneTraitIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneTraitInput {
    AND: [FilterFindOneTraitInput!]
    OR: [FilterFindOneTraitInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneTraitOperatorsInput
    desc: [String]
    index: String
    name: String
    parent: FilterFindOneAbilityScoreSkillsInput
    proficiencies: [FilterFindOneTraitProficienciesInput]
    proficiency_choices: FilterFindOneTraitProficiency_choicesInput
    races: [FilterFindOneAbilityScoreSkillsInput]
    subraces: [FilterFindOneAbilityScoreSkillsInput]
    trait_specific: FilterFindOneTraitTrait_specificInput
    url: String
}

input FilterFindOneTraitNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneTraitOperatorsInput {
    _id: FilterFindOneTrait_idOperatorsInput
    desc: FilterFindOneTraitDescOperatorsInput
    index: FilterFindOneTraitIndexOperatorsInput
    name: FilterFindOneTraitNameOperatorsInput
    url: FilterFindOneTraitUrlOperatorsInput
}

input FilterFindOneTraitProficienciesInput {
    index: String
    name: String
    url: String
}

input FilterFindOneTraitProficiency_choicesInput {
    choose: Float
    from: [FilterFindOneAbilityScoreSkillsInput]
    type: String
}

input FilterFindOneTraitTrait_specificBreath_weaponDamageInput {
    damage_at_character_level: JSON
    damage_type: FilterFindOneAbilityScoreSkillsInput
}

input FilterFindOneTraitTrait_specificBreath_weaponDcInput {
    dc_type: FilterFindOneAbilityScoreSkillsInput
    success_type: String
}

input FilterFindOneTraitTrait_specificBreath_weaponInput {
    damage: [FilterFindOneTraitTrait_specificBreath_weaponDamageInput]
    dc: FilterFindOneTraitTrait_specificBreath_weaponDcInput
    desc: String
    name: String
    usage: FilterFindOneTraitTrait_specificBreath_weaponUsageInput
}

input FilterFindOneTraitTrait_specificBreath_weaponUsageInput {
    times: Float
    type: String
}

input FilterFindOneTraitTrait_specificInput {
    breath_weapon: FilterFindOneTraitTrait_specificBreath_weaponInput
    damage_type: FilterFindOneAbilityScoreSkillsInput
    spell_options: FilterFindOneTraitTrait_specificSubtrait_optionsInput
    subtrait_options: FilterFindOneTraitTrait_specificSubtrait_optionsInput
}

input FilterFindOneTraitTrait_specificSubtrait_optionsInput {
    choose: Float
    from: [AbilityScoreSkillsInput]
    type: String
}

input FilterFindOneTraitUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneTrait_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneWeaponPropertyDescOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneWeaponPropertyIndexOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneWeaponPropertyInput {
    AND: [FilterFindOneWeaponPropertyInput!]
    OR: [FilterFindOneWeaponPropertyInput!]
    _id: String
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneWeaponPropertyOperatorsInput
    desc: [String]
    index: String
    name: String
    url: String
}

input FilterFindOneWeaponPropertyNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneWeaponPropertyOperatorsInput {
    _id: FilterFindOneWeaponProperty_idOperatorsInput
    desc: FilterFindOneWeaponPropertyDescOperatorsInput
    index: FilterFindOneWeaponPropertyIndexOperatorsInput
    name: FilterFindOneWeaponPropertyNameOperatorsInput
    url: FilterFindOneWeaponPropertyUrlOperatorsInput
}

input FilterFindOneWeaponPropertyUrlOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneWeaponProperty_idOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input MonsterActionsDamageInput {
    damage_dice: String
    damage_type: AbilityScoreSkillsInput
}

input MonsterActionsDcInput {
    dc_type: AbilityScoreSkillsInput
    dc_value: Float
    success_type: String
}
